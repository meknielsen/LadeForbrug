import {
  Graphic_default
} from "./chunk-Q6ZV7OWU.js";
import {
  classAdderBuilder
} from "./chunk-4CFL5FTA.js";
import {
  classMap,
  dispatch,
  exclude,
  forwardEventsBuilder,
  prefixFilter,
  useActions
} from "./chunk-DXJYLXNN.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_flush_callback,
  add_location,
  append_hydration_dev,
  assign,
  bind,
  binding_callbacks,
  children,
  claim_component,
  claim_element,
  claim_space,
  compute_rest_props,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  globals,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  onDestroy,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-RVLVW3YK.js";
import {
  MDCMenuFoundation,
  cssClasses
} from "./chunk-EYBNP4YI.js";
import {
  ponyfill_exports
} from "./chunk-AOEPRBHD.js";
import {
  Corner,
  MDCMenuSurfaceFoundation
} from "./chunk-BCZPS35K.js";

// node_modules/@smui/menu-surface/dist/MenuSurface.svelte
var { document: document_1 } = globals;
var file = "node_modules/@smui/menu-surface/dist/MenuSurface.svelte";
function create_fragment(ctx) {
  let t;
  let div;
  let div_class_value;
  let div_style_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[34].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[33],
    null
  );
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-menu-surface": true,
        "mdc-menu-surface--fixed": (
          /*fixed*/
          ctx[4]
        ),
        "mdc-menu-surface--open": (
          /*isStatic*/
          ctx[3]
        ),
        "smui-menu-surface--static": (
          /*isStatic*/
          ctx[3]
        ),
        "mdc-menu-surface--fullwidth": (
          /*fullWidth*/
          ctx[5]
        ),
        .../*internalClasses*/
        ctx[8]
      })
    },
    {
      style: div_style_value = Object.entries(
        /*internalStyles*/
        ctx[9]
      ).map(func).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    { role: "dialog" },
    /*$$restProps*/
    ctx[12]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      t = space();
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      t = claim_space(nodes);
      div = claim_element(nodes, "DIV", { class: true, style: true, role: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file, 2, 0, 52);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[35](div);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            document_1.body,
            "click",
            /*handleBodyClick*/
            ctx[11],
            true,
            false,
            false,
            false
          ),
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[10].call(null, div)),
          listen_dev(
            div,
            "keydown",
            function() {
              if (is_function(
                /*instance*/
                ctx[7] && /*instance*/
                ctx[7].handleKeydown.bind(
                  /*instance*/
                  ctx[7]
                )
              ))
                /*instance*/
                (ctx[7] && /*instance*/
                ctx[7].handleKeydown.bind(
                  /*instance*/
                  ctx[7]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[33],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[33]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[33],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty[0] & /*className, fixed, isStatic, fullWidth, internalClasses*/
        314 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx[1]
          ]: true,
          "mdc-menu-surface": true,
          "mdc-menu-surface--fixed": (
            /*fixed*/
            ctx[4]
          ),
          "mdc-menu-surface--open": (
            /*isStatic*/
            ctx[3]
          ),
          "smui-menu-surface--static": (
            /*isStatic*/
            ctx[3]
          ),
          "mdc-menu-surface--fullwidth": (
            /*fullWidth*/
            ctx[5]
          ),
          .../*internalClasses*/
          ctx[8]
        }))) && { class: div_class_value },
        (!current || dirty[0] & /*internalStyles, style*/
        516 && div_style_value !== (div_style_value = Object.entries(
          /*internalStyles*/
          ctx[9]
        ).map(func).concat([
          /*style*/
          ctx[2]
        ]).join(" "))) && { style: div_style_value },
        { role: "dialog" },
        dirty[0] & /*$$restProps*/
        4096 && /*$$restProps*/
        ctx[12]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(t);
      if (detaching)
        detach_dev(div);
      if (default_slot)
        default_slot.d(detaching);
      ctx[35](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "static",
    "anchor",
    "fixed",
    "open",
    "managed",
    "fullWidth",
    "quickOpen",
    "anchorElement",
    "anchorCorner",
    "anchorMargin",
    "maxHeight",
    "horizontallyCenteredOnViewport",
    "openBottomBias",
    "neverRestoreFocus",
    "isOpen",
    "setOpen",
    "setAbsolutePosition",
    "setIsHoisted",
    "isFixed",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("MenuSurface", slots, ["default"]);
  var _a, _b, _c;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { static: isStatic = false } = $$props;
  let { anchor = true } = $$props;
  let { fixed = false } = $$props;
  let { open = isStatic } = $$props;
  let { managed = false } = $$props;
  let { fullWidth = false } = $$props;
  let { quickOpen = false } = $$props;
  let { anchorElement = void 0 } = $$props;
  let { anchorCorner = void 0 } = $$props;
  let { anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 } } = $$props;
  let { maxHeight = 0 } = $$props;
  let { horizontallyCenteredOnViewport = false } = $$props;
  let { openBottomBias = 0 } = $$props;
  let { neverRestoreFocus = false } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalStyles = {};
  let previousFocus = void 0;
  setContext("SMUI:list:role", "menu");
  setContext("SMUI:list:item:role", "menuitem");
  const iCorner = Corner;
  onMount(() => {
    $$invalidate(7, instance2 = new MDCMenuSurfaceFoundation({
      addClass,
      removeClass,
      hasClass,
      hasAnchor: () => !!anchorElement,
      notifyClose: () => {
        if (!managed) {
          $$invalidate(13, open = isStatic);
        }
        if (!open) {
          dispatch(element2, "SMUIMenuSurface:closed", void 0, void 0, true);
        }
      },
      notifyClosing: () => {
        if (!managed) {
          $$invalidate(13, open = isStatic);
        }
        if (!open) {
          dispatch(element2, "SMUIMenuSurface:closing", void 0, void 0, true);
        }
      },
      notifyOpen: () => {
        if (!managed) {
          $$invalidate(13, open = true);
        }
        if (open) {
          dispatch(element2, "SMUIMenuSurface:opened", void 0, void 0, true);
        }
      },
      notifyOpening: () => {
        if (!open) {
          dispatch(element2, "SMUIMenuSurface:opening", void 0, void 0, true);
        }
      },
      isElementInContainer: (el) => element2.contains(el),
      isRtl: () => getComputedStyle(element2).getPropertyValue("direction") === "rtl",
      setTransformOrigin: (origin) => {
        $$invalidate(9, internalStyles["transform-origin"] = origin, internalStyles);
      },
      isFocused: () => document.activeElement === element2,
      saveFocus: () => {
        var _a2;
        previousFocus = (_a2 = document.activeElement) !== null && _a2 !== void 0 ? _a2 : void 0;
      },
      restoreFocus: () => {
        if (!neverRestoreFocus && (!element2 || element2.contains(document.activeElement)) && previousFocus && document.contains(previousFocus) && "focus" in previousFocus) {
          previousFocus.focus();
        }
      },
      getInnerDimensions: () => {
        return {
          width: element2.offsetWidth,
          height: element2.offsetHeight
        };
      },
      getAnchorDimensions: () => anchorElement ? anchorElement.getBoundingClientRect() : null,
      getWindowDimensions: () => {
        return {
          width: window.innerWidth,
          height: window.innerHeight
        };
      },
      getBodyDimensions: () => {
        return {
          width: document.body.clientWidth,
          height: document.body.clientHeight
        };
      },
      getWindowScroll: () => {
        return {
          x: window.pageXOffset,
          y: window.pageYOffset
        };
      },
      setPosition: (position) => {
        $$invalidate(9, internalStyles.left = "left" in position ? `${position.left}px` : "", internalStyles);
        $$invalidate(9, internalStyles.right = "right" in position ? `${position.right}px` : "", internalStyles);
        $$invalidate(9, internalStyles.top = "top" in position ? `${position.top}px` : "", internalStyles);
        $$invalidate(9, internalStyles.bottom = "bottom" in position ? `${position.bottom}px` : "", internalStyles);
      },
      setMaxHeight: (height) => {
        $$invalidate(9, internalStyles["max-height"] = height, internalStyles);
      }
    }));
    const accessor = {
      get open() {
        return open;
      },
      set open(value) {
        $$invalidate(13, open = value);
      },
      closeProgrammatic
    };
    dispatch(element2, "SMUIMenuSurface:mount", accessor);
    instance2.init();
    return () => {
      var _a2;
      const isHoisted = instance2.isHoistedElement;
      instance2.destroy();
      if (isHoisted) {
        (_a2 = element2.parentNode) === null || _a2 === void 0 ? void 0 : _a2.removeChild(element2);
      }
    };
  });
  onDestroy(() => {
    var _a2;
    if (anchor) {
      element2 && ((_a2 = element2.parentElement) === null || _a2 === void 0 ? void 0 : _a2.classList.remove("mdc-menu-surface--anchor"));
    }
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = false, internalClasses);
    }
  }
  function closeProgrammatic(skipRestoreFocus) {
    instance2.close(skipRestoreFocus);
    $$invalidate(13, open = false);
  }
  function handleBodyClick(event) {
    if (instance2 && open && !managed) {
      instance2.handleBodyClick(event);
    }
  }
  function isOpen() {
    return open;
  }
  function setOpen(value) {
    $$invalidate(13, open = value);
  }
  function setAbsolutePosition(x, y) {
    return instance2.setAbsolutePosition(x, y);
  }
  function setIsHoisted(isHoisted) {
    return instance2.setIsHoisted(isHoisted);
  }
  function isFixed() {
    return instance2.isFixed();
  }
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(6, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("static" in $$new_props)
      $$invalidate(3, isStatic = $$new_props.static);
    if ("anchor" in $$new_props)
      $$invalidate(15, anchor = $$new_props.anchor);
    if ("fixed" in $$new_props)
      $$invalidate(4, fixed = $$new_props.fixed);
    if ("open" in $$new_props)
      $$invalidate(13, open = $$new_props.open);
    if ("managed" in $$new_props)
      $$invalidate(16, managed = $$new_props.managed);
    if ("fullWidth" in $$new_props)
      $$invalidate(5, fullWidth = $$new_props.fullWidth);
    if ("quickOpen" in $$new_props)
      $$invalidate(17, quickOpen = $$new_props.quickOpen);
    if ("anchorElement" in $$new_props)
      $$invalidate(14, anchorElement = $$new_props.anchorElement);
    if ("anchorCorner" in $$new_props)
      $$invalidate(18, anchorCorner = $$new_props.anchorCorner);
    if ("anchorMargin" in $$new_props)
      $$invalidate(19, anchorMargin = $$new_props.anchorMargin);
    if ("maxHeight" in $$new_props)
      $$invalidate(20, maxHeight = $$new_props.maxHeight);
    if ("horizontallyCenteredOnViewport" in $$new_props)
      $$invalidate(21, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
    if ("openBottomBias" in $$new_props)
      $$invalidate(22, openBottomBias = $$new_props.openBottomBias);
    if ("neverRestoreFocus" in $$new_props)
      $$invalidate(23, neverRestoreFocus = $$new_props.neverRestoreFocus);
    if ("$$scope" in $$new_props)
      $$invalidate(33, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    _a,
    _b,
    _c,
    MDCMenuSurfaceFoundation,
    onMount,
    onDestroy,
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    Corner,
    forwardEvents,
    use,
    className,
    style,
    isStatic,
    anchor,
    fixed,
    open,
    managed,
    fullWidth,
    quickOpen,
    anchorElement,
    anchorCorner,
    anchorMargin,
    maxHeight,
    horizontallyCenteredOnViewport,
    openBottomBias,
    neverRestoreFocus,
    element: element2,
    instance: instance2,
    internalClasses,
    internalStyles,
    previousFocus,
    iCorner,
    hasClass,
    addClass,
    removeClass,
    closeProgrammatic,
    handleBodyClick,
    isOpen,
    setOpen,
    setAbsolutePosition,
    setIsHoisted,
    isFixed,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("_a" in $$props)
      $$invalidate(30, _a = $$new_props._a);
    if ("_b" in $$props)
      $$invalidate(31, _b = $$new_props._b);
    if ("_c" in $$props)
      $$invalidate(32, _c = $$new_props._c);
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(2, style = $$new_props.style);
    if ("isStatic" in $$props)
      $$invalidate(3, isStatic = $$new_props.isStatic);
    if ("anchor" in $$props)
      $$invalidate(15, anchor = $$new_props.anchor);
    if ("fixed" in $$props)
      $$invalidate(4, fixed = $$new_props.fixed);
    if ("open" in $$props)
      $$invalidate(13, open = $$new_props.open);
    if ("managed" in $$props)
      $$invalidate(16, managed = $$new_props.managed);
    if ("fullWidth" in $$props)
      $$invalidate(5, fullWidth = $$new_props.fullWidth);
    if ("quickOpen" in $$props)
      $$invalidate(17, quickOpen = $$new_props.quickOpen);
    if ("anchorElement" in $$props)
      $$invalidate(14, anchorElement = $$new_props.anchorElement);
    if ("anchorCorner" in $$props)
      $$invalidate(18, anchorCorner = $$new_props.anchorCorner);
    if ("anchorMargin" in $$props)
      $$invalidate(19, anchorMargin = $$new_props.anchorMargin);
    if ("maxHeight" in $$props)
      $$invalidate(20, maxHeight = $$new_props.maxHeight);
    if ("horizontallyCenteredOnViewport" in $$props)
      $$invalidate(21, horizontallyCenteredOnViewport = $$new_props.horizontallyCenteredOnViewport);
    if ("openBottomBias" in $$props)
      $$invalidate(22, openBottomBias = $$new_props.openBottomBias);
    if ("neverRestoreFocus" in $$props)
      $$invalidate(23, neverRestoreFocus = $$new_props.neverRestoreFocus);
    if ("element" in $$props)
      $$invalidate(6, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(7, instance2 = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(8, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(9, internalStyles = $$new_props.internalStyles);
    if ("previousFocus" in $$props)
      previousFocus = $$new_props.previousFocus;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*element, anchor, _a*/
    1073774656 | $$self.$$.dirty[1] & /*_b, _c*/
    3) {
      $:
        if (element2 && anchor && !($$invalidate(30, _a = element2.parentElement) === null || _a === void 0 ? void 0 : _a.classList.contains("mdc-menu-surface--anchor"))) {
          $$invalidate(31, _b = element2.parentElement) === null || _b === void 0 ? void 0 : _b.classList.add("mdc-menu-surface--anchor");
          $$invalidate(14, anchorElement = $$invalidate(32, _c = element2.parentElement) !== null && _c !== void 0 ? _c : void 0);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, open*/
    8320) {
      $:
        if (instance2 && instance2.isOpen() !== open) {
          if (open) {
            instance2.open();
          } else {
            instance2.close();
          }
        }
    }
    if ($$self.$$.dirty[0] & /*instance, quickOpen*/
    131200) {
      $:
        if (instance2) {
          instance2.setQuickOpen(quickOpen);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, fixed*/
    144) {
      $:
        if (instance2) {
          instance2.setFixedPosition(fixed);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, maxHeight*/
    1048704) {
      $:
        if (instance2) {
          instance2.setMaxHeight(maxHeight);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, horizontallyCenteredOnViewport*/
    2097280) {
      $:
        if (instance2) {
          instance2.setIsHorizontallyCenteredOnViewport(horizontallyCenteredOnViewport);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, anchorCorner*/
    262272) {
      $:
        if (instance2 && anchorCorner != null) {
          if (typeof anchorCorner === "string") {
            instance2.setAnchorCorner(iCorner[anchorCorner]);
          } else {
            instance2.setAnchorCorner(anchorCorner);
          }
        }
    }
    if ($$self.$$.dirty[0] & /*instance, anchorMargin*/
    524416) {
      $:
        if (instance2) {
          instance2.setAnchorMargin(anchorMargin);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, openBottomBias*/
    4194432) {
      $:
        if (instance2) {
          instance2.setOpenBottomBias(openBottomBias);
        }
    }
  };
  return [
    use,
    className,
    style,
    isStatic,
    fixed,
    fullWidth,
    element2,
    instance2,
    internalClasses,
    internalStyles,
    forwardEvents,
    handleBodyClick,
    $$restProps,
    open,
    anchorElement,
    anchor,
    managed,
    quickOpen,
    anchorCorner,
    anchorMargin,
    maxHeight,
    horizontallyCenteredOnViewport,
    openBottomBias,
    neverRestoreFocus,
    isOpen,
    setOpen,
    setAbsolutePosition,
    setIsHoisted,
    isFixed,
    getElement,
    _a,
    _b,
    _c,
    $$scope,
    slots,
    div_binding
  ];
}
var MenuSurface = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance_1,
      create_fragment,
      safe_not_equal,
      {
        use: 0,
        class: 1,
        style: 2,
        static: 3,
        anchor: 15,
        fixed: 4,
        open: 13,
        managed: 16,
        fullWidth: 5,
        quickOpen: 17,
        anchorElement: 14,
        anchorCorner: 18,
        anchorMargin: 19,
        maxHeight: 20,
        horizontallyCenteredOnViewport: 21,
        openBottomBias: 22,
        neverRestoreFocus: 23,
        isOpen: 24,
        setOpen: 25,
        setAbsolutePosition: 26,
        setIsHoisted: 27,
        isFixed: 28,
        getElement: 29
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "MenuSurface",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get static() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set static(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchor() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchor(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fixed() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fixed(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get open() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set open(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get managed() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set managed(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fullWidth() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fullWidth(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get quickOpen() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set quickOpen(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchorElement() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchorElement(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchorCorner() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchorCorner(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchorMargin() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchorMargin(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get maxHeight() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set maxHeight(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get horizontallyCenteredOnViewport() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set horizontallyCenteredOnViewport(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get openBottomBias() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set openBottomBias(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get neverRestoreFocus() {
    throw new Error("<MenuSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set neverRestoreFocus(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isOpen() {
    return this.$$.ctx[24];
  }
  set isOpen(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setOpen() {
    return this.$$.ctx[25];
  }
  set setOpen(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setAbsolutePosition() {
    return this.$$.ctx[26];
  }
  set setAbsolutePosition(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setIsHoisted() {
    return this.$$.ctx[27];
  }
  set setIsHoisted(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isFixed() {
    return this.$$.ctx[28];
  }
  set isFixed(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[29];
  }
  set getElement(value) {
    throw new Error("<MenuSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var MenuSurface_default = MenuSurface;

// node_modules/@smui/menu-surface/dist/Anchor.js
function Anchor(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className) } = {}) {
  addClass("mdc-menu-surface--anchor");
  return {
    destroy() {
      removeClass("mdc-menu-surface--anchor");
    }
  };
}

// node_modules/@smui/menu-surface/dist/index.js
var dist_default = MenuSurface_default;

// node_modules/@smui/menu/dist/Menu.svelte
function create_default_slot(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[22],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4194304)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[22],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[22]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[22],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(1:0) <MenuSurface   bind:this={element}   use={usePass}   class={classMap({     [className]: true,     'mdc-menu': true,   })}   bind:open   on:SMUIMenuSurface:mount={handleMenuSurfaceAccessor}   on:SMUIList:mount={handleListAccessor}   on:SMUIMenuSurface:opened={() =>     instance && instance.handleMenuSurfaceOpened()}   on:keydown={handleKeydown}   on:SMUIList:action={(event) =>     instance &&     instance.handleItemAction(       listAccessor.getOrderedList()[event.detail.index].element,     )}   {...$$restProps}>",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let menusurface;
  let updating_open;
  let current;
  const menusurface_spread_levels = [
    { use: (
      /*usePass*/
      ctx[5]
    ) },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-menu": true
      })
    },
    /*$$restProps*/
    ctx[9]
  ];
  function menusurface_open_binding(value) {
    ctx[19](value);
  }
  let menusurface_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  for (let i = 0; i < menusurface_spread_levels.length; i += 1) {
    menusurface_props = assign(menusurface_props, menusurface_spread_levels[i]);
  }
  if (
    /*open*/
    ctx[0] !== void 0
  ) {
    menusurface_props.open = /*open*/
    ctx[0];
  }
  menusurface = new dist_default({ props: menusurface_props, $$inline: true });
  ctx[18](menusurface);
  binding_callbacks.push(() => bind(menusurface, "open", menusurface_open_binding));
  menusurface.$on(
    "SMUIMenuSurface:mount",
    /*handleMenuSurfaceAccessor*/
    ctx[7]
  );
  menusurface.$on(
    "SMUIList:mount",
    /*handleListAccessor*/
    ctx[8]
  );
  menusurface.$on(
    "SMUIMenuSurface:opened",
    /*SMUIMenuSurface_opened_handler*/
    ctx[20]
  );
  menusurface.$on(
    "keydown",
    /*handleKeydown*/
    ctx[6]
  );
  menusurface.$on(
    "SMUIList:action",
    /*SMUIList_action_handler*/
    ctx[21]
  );
  const block = {
    c: function create() {
      create_component(menusurface.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(menusurface.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(menusurface, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const menusurface_changes = dirty & /*usePass, classMap, className, $$restProps*/
      546 ? get_spread_update(menusurface_spread_levels, [
        dirty & /*usePass*/
        32 && { use: (
          /*usePass*/
          ctx2[5]
        ) },
        dirty & /*classMap, className*/
        2 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-menu": true
          })
        },
        dirty & /*$$restProps*/
        512 && get_spread_object(
          /*$$restProps*/
          ctx2[9]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      4194304) {
        menusurface_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_open && dirty & /*open*/
      1) {
        updating_open = true;
        menusurface_changes.open = /*open*/
        ctx2[0];
        add_flush_callback(() => updating_open = false);
      }
      menusurface.$set(menusurface_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(menusurface.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(menusurface.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[18](null);
      destroy_component(menusurface, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance_12($$self, $$props, $$invalidate) {
  let usePass;
  const omit_props_names = [
    "use",
    "class",
    "open",
    "isOpen",
    "setOpen",
    "setDefaultFocusState",
    "getSelectedIndex",
    "getMenuSurface",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Menu", slots, ["default"]);
  const { closest } = ponyfill_exports;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { open = false } = $$props;
  let element2;
  let instance2;
  let menuSurfaceAccessor;
  let listAccessor;
  onMount(() => {
    $$invalidate(3, instance2 = new MDCMenuFoundation({
      addClassToElementAtIndex: (index, className2) => {
        listAccessor.addClassForElementIndex(index, className2);
      },
      removeClassFromElementAtIndex: (index, className2) => {
        listAccessor.removeClassForElementIndex(index, className2);
      },
      addAttributeToElementAtIndex: (index, attr, value) => {
        listAccessor.setAttributeForElementIndex(index, attr, value);
      },
      removeAttributeFromElementAtIndex: (index, attr) => {
        listAccessor.removeAttributeForElementIndex(index, attr);
      },
      getAttributeFromElementAtIndex: (index, attr) => listAccessor.getAttributeFromElementIndex(index, attr),
      elementContainsClass: (element3, className2) => element3.classList.contains(className2),
      closeSurface: (skipRestoreFocus) => {
        menuSurfaceAccessor.closeProgrammatic(skipRestoreFocus);
        dispatch(getElement(), "SMUIMenu:closedProgrammatically");
      },
      getElementIndex: (element3) => listAccessor.getOrderedList().map((accessor) => accessor.element).indexOf(element3),
      notifySelected: (evtData) => dispatch(
        getElement(),
        "SMUIMenu:selected",
        {
          index: evtData.index,
          item: listAccessor.getOrderedList()[evtData.index].element
        },
        void 0,
        true
      ),
      getMenuItemCount: () => listAccessor.items.length,
      focusItemAtIndex: (index) => listAccessor.focusItemAtIndex(index),
      focusListRoot: () => "focus" in listAccessor.element && listAccessor.element.focus(),
      isSelectableItemAtIndex: (index) => !!closest(listAccessor.getOrderedList()[index].element, `.${cssClasses.MENU_SELECTION_GROUP}`),
      getSelectedSiblingOfItemAtIndex: (index) => {
        const orderedList = listAccessor.getOrderedList();
        const selectionGroupEl = closest(orderedList[index].element, `.${cssClasses.MENU_SELECTION_GROUP}`);
        const selectedItemEl = selectionGroupEl === null || selectionGroupEl === void 0 ? void 0 : selectionGroupEl.querySelector(`.${cssClasses.MENU_SELECTED_LIST_ITEM}`);
        return selectedItemEl ? orderedList.map((item) => item.element).indexOf(selectedItemEl) : -1;
      }
    }));
    dispatch(getElement(), "SMUIMenu:mount", instance2);
    instance2.init();
    return () => {
      instance2.destroy();
    };
  });
  function handleKeydown(event) {
    instance2 && instance2.handleKeydown(event);
  }
  function handleMenuSurfaceAccessor(event) {
    if (!menuSurfaceAccessor) {
      menuSurfaceAccessor = event.detail;
    }
  }
  function handleListAccessor(event) {
    if (!listAccessor) {
      $$invalidate(4, listAccessor = event.detail);
    }
  }
  function isOpen() {
    return open;
  }
  function setOpen(value) {
    $$invalidate(0, open = value);
  }
  function setDefaultFocusState(focusState) {
    instance2.setDefaultFocusState(focusState);
  }
  function getSelectedIndex() {
    return instance2.getSelectedIndex();
  }
  function getMenuSurface() {
    return element2;
  }
  function getElement() {
    return element2.getElement();
  }
  function menusurface_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(2, element2);
    });
  }
  function menusurface_open_binding(value) {
    open = value;
    $$invalidate(0, open);
  }
  const SMUIMenuSurface_opened_handler = () => instance2 && instance2.handleMenuSurfaceOpened();
  const SMUIList_action_handler = (event) => instance2 && instance2.handleItemAction(listAccessor.getOrderedList()[event.detail.index].element);
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(10, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("open" in $$new_props)
      $$invalidate(0, open = $$new_props.open);
    if ("$$scope" in $$new_props)
      $$invalidate(22, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCMenuFoundation,
    cssClasses,
    ponyfill: ponyfill_exports,
    onMount,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    dispatch,
    MenuSurface: dist_default,
    closest,
    forwardEvents,
    use,
    className,
    open,
    element: element2,
    instance: instance2,
    menuSurfaceAccessor,
    listAccessor,
    handleKeydown,
    handleMenuSurfaceAccessor,
    handleListAccessor,
    isOpen,
    setOpen,
    setDefaultFocusState,
    getSelectedIndex,
    getMenuSurface,
    getElement,
    usePass
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(10, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("open" in $$props)
      $$invalidate(0, open = $$new_props.open);
    if ("element" in $$props)
      $$invalidate(2, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(3, instance2 = $$new_props.instance);
    if ("menuSurfaceAccessor" in $$props)
      menuSurfaceAccessor = $$new_props.menuSurfaceAccessor;
    if ("listAccessor" in $$props)
      $$invalidate(4, listAccessor = $$new_props.listAccessor);
    if ("usePass" in $$props)
      $$invalidate(5, usePass = $$new_props.usePass);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*use*/
    1024) {
      $:
        $$invalidate(5, usePass = [forwardEvents, ...use]);
    }
  };
  return [
    open,
    className,
    element2,
    instance2,
    listAccessor,
    usePass,
    handleKeydown,
    handleMenuSurfaceAccessor,
    handleListAccessor,
    $$restProps,
    use,
    isOpen,
    setOpen,
    setDefaultFocusState,
    getSelectedIndex,
    getMenuSurface,
    getElement,
    slots,
    menusurface_binding,
    menusurface_open_binding,
    SMUIMenuSurface_opened_handler,
    SMUIList_action_handler,
    $$scope
  ];
}
var Menu = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_12, create_fragment2, safe_not_equal, {
      use: 10,
      class: 1,
      open: 0,
      isOpen: 11,
      setOpen: 12,
      setDefaultFocusState: 13,
      getSelectedIndex: 14,
      getMenuSurface: 15,
      getElement: 16
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Menu",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get open() {
    throw new Error("<Menu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set open(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isOpen() {
    return this.$$.ctx[11];
  }
  set isOpen(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setOpen() {
    return this.$$.ctx[12];
  }
  set setOpen(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setDefaultFocusState() {
    return this.$$.ctx[13];
  }
  set setDefaultFocusState(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getSelectedIndex() {
    return this.$$.ctx[14];
  }
  set getSelectedIndex(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getMenuSurface() {
    return this.$$.ctx[15];
  }
  set getMenuSurface(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[16];
  }
  set getElement(value) {
    throw new Error("<Menu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Menu_default = Menu;

// node_modules/@smui/menu/dist/SelectionGroup.svelte
var file2 = "node_modules/@smui/menu/dist/SelectionGroup.svelte";
function create_fragment3(ctx) {
  let li;
  let ul;
  let ul_class_value;
  let useActions_action;
  let useActions_action_1;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  let ul_levels = [
    {
      class: ul_class_value = classMap({
        [
          /*list$class*/
          ctx[2]
        ]: true,
        "mdc-menu__selection-group": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[5],
      "list$"
    )
  ];
  let ul_data = {};
  for (let i = 0; i < ul_levels.length; i += 1) {
    ul_data = assign(ul_data, ul_levels[i]);
  }
  let li_levels = [exclude(
    /*$$restProps*/
    ctx[5],
    ["list$"]
  )];
  let li_data = {};
  for (let i = 0; i < li_levels.length; i += 1) {
    li_data = assign(li_data, li_levels[i]);
  }
  const block = {
    c: function create() {
      li = element("li");
      ul = element("ul");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {});
      var li_nodes = children(li);
      ul = claim_element(li_nodes, "UL", { class: true });
      var ul_nodes = children(ul);
      if (default_slot)
        default_slot.l(ul_nodes);
      ul_nodes.forEach(detach_dev);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(ul, ul_data);
      add_location(ul, file2, 6, 2, 112);
      set_attributes(li, li_data);
      add_location(li, file2, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, ul);
      if (default_slot) {
        default_slot.m(ul, null);
      }
      ctx[9](li);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            ul,
            /*list$use*/
            ctx[1]
          )),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            li,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[4].call(null, li))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(ul, ul_data = get_spread_update(ul_levels, [
        (!current || dirty & /*list$class*/
        4 && ul_class_value !== (ul_class_value = classMap({
          [
            /*list$class*/
            ctx2[2]
          ]: true,
          "mdc-menu__selection-group": true
        }))) && { class: ul_class_value },
        dirty & /*$$restProps*/
        32 && prefixFilter(
          /*$$restProps*/
          ctx2[5],
          "list$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*list$use*/
      2)
        useActions_action.update.call(
          null,
          /*list$use*/
          ctx2[1]
        );
      set_attributes(li, li_data = get_spread_update(li_levels, [dirty & /*$$restProps*/
      32 && exclude(
        /*$$restProps*/
        ctx2[5],
        ["list$"]
      )]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty & /*use*/
      1)
        useActions_action_1.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(li);
      if (default_slot)
        default_slot.d(detaching);
      ctx[9](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "list$use", "list$class", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SelectionGroup", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { list$use = [] } = $$props;
  let { list$class = "" } = $$props;
  let element2;
  setContext("SMUI:list:graphic:menu-selection-group", true);
  function getElement() {
    return element2;
  }
  function li_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(3, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("list$use" in $$new_props)
      $$invalidate(1, list$use = $$new_props.list$use);
    if ("list$class" in $$new_props)
      $$invalidate(2, list$class = $$new_props.list$class);
    if ("$$scope" in $$new_props)
      $$invalidate(7, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    exclude,
    prefixFilter,
    useActions,
    forwardEvents,
    use,
    list$use,
    list$class,
    element: element2,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("list$use" in $$props)
      $$invalidate(1, list$use = $$new_props.list$use);
    if ("list$class" in $$props)
      $$invalidate(2, list$class = $$new_props.list$class);
    if ("element" in $$props)
      $$invalidate(3, element2 = $$new_props.element);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    list$use,
    list$class,
    element2,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    li_binding
  ];
}
var SelectionGroup = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment3, safe_not_equal, {
      use: 0,
      list$use: 1,
      list$class: 2,
      getElement: 6
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SelectionGroup",
      options,
      id: create_fragment3.name
    });
  }
  get use() {
    throw new Error("<SelectionGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<SelectionGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get list$use() {
    throw new Error("<SelectionGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set list$use(value) {
    throw new Error("<SelectionGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get list$class() {
    throw new Error("<SelectionGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set list$class(value) {
    throw new Error("<SelectionGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[6];
  }
  set getElement(value) {
    throw new Error("<SelectionGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SelectionGroup_default = SelectionGroup;

// node_modules/@smui/menu/dist/SelectionGroupIcon.js
var SelectionGroupIcon_default = classAdderBuilder({
  class: "mdc-menu__selection-group-icon",
  component: Graphic_default
});

// node_modules/@smui/menu/dist/index.js
var dist_default2 = Menu_default;

export {
  Anchor,
  SelectionGroup_default,
  SelectionGroupIcon_default,
  dist_default2 as dist_default
};
//# sourceMappingURL=chunk-XZSYJWFL.js.map
