import {
  AnchorBoundaryType,
  CssClasses,
  MDCTooltipFoundation,
  XPosition,
  YPosition
} from "./chunk-XPP2DUYU.js";
import "./chunk-4LU6W7XY.js";
import {
  classAdderBuilder
} from "./chunk-4CFL5FTA.js";
import "./chunk-UL5GDP5I.js";
import {
  writable
} from "./chunk-E6ZP6LG5.js";
import {
  classMap,
  dispatch,
  exclude,
  forwardEventsBuilder,
  prefixFilter,
  useActions
} from "./chunk-DXJYLXNN.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  append_hydration_dev,
  assign,
  binding_callbacks,
  check_outros,
  children,
  claim_element,
  component_subscribe,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  onDestroy,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  set_store_value,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-RVLVW3YK.js";
import "./chunk-BOISVMCQ.js";
import "./chunk-5XZPH2TV.js";
import "./chunk-LENT37JJ.js";
import "./chunk-ZC22LKFR.js";

// node_modules/@smui/tooltip/dist/Tooltip.svelte
var file = "node_modules/@smui/tooltip/dist/Tooltip.svelte";
function create_fragment(ctx) {
  let div1;
  let div0;
  let div0_class_value;
  let div0_style_value;
  let div1_class_value;
  let div1_style_value;
  let div1_data_mdc_tooltip_persist_value;
  let div1_data_mdc_tooltip_persistent_value;
  let div1_data_hide_tooltip_from_screenreader_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[32].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[31],
    null
  );
  let div0_levels = [
    {
      class: div0_class_value = classMap({
        [
          /*surface$class*/
          ctx[6]
        ]: true,
        "mdc-tooltip__surface": true,
        "mdc-tooltip__surface-animation": true
      })
    },
    {
      style: div0_style_value = Object.entries(
        /*surfaceAnimationStyles*/
        ctx[13]
      ).map(func).concat([
        /*surface$style*/
        ctx[7]
      ]).join(" ")
    },
    prefixFilter(
      /*$$restProps*/
      ctx[19],
      "surface$"
    )
  ];
  let div_data = {};
  for (let i = 0; i < div0_levels.length; i += 1) {
    div_data = assign(div_data, div0_levels[i]);
  }
  let div1_levels = [
    {
      class: div1_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-tooltip": true,
        "mdc-tooltip--rich": (
          /*rich*/
          ctx[18]
        ),
        .../*internalClasses*/
        ctx[10]
      })
    },
    {
      style: div1_style_value = Object.entries(
        /*internalStyles*/
        ctx[11]
      ).map(func_1).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    { "aria-hidden": "true" },
    { id: (
      /*id*/
      ctx[3]
    ) },
    {
      "data-mdc-tooltip-persist": div1_data_mdc_tooltip_persist_value = /*rich*/
      ctx[18] && /*persistent*/
      ctx[4] ? "true" : void 0
    },
    {
      "data-mdc-tooltip-persistent": div1_data_mdc_tooltip_persistent_value = /* MDC uses this attr, but document the one above */
      /*rich*/
      ctx[18] && /*persistent*/
      ctx[4] ? "true" : void 0
    },
    { "data-mdc-tooltip-has-caret": void 0 },
    {
      "data-hide-tooltip-from-screenreader": div1_data_hide_tooltip_from_screenreader_value = /*hideFromScreenreader*/
      ctx[5] ? "true" : void 0
    },
    /*roleProps*/
    ctx[14],
    /*internalAttrs*/
    ctx[12],
    exclude(
      /*$$restProps*/
      ctx[19],
      ["surface$"]
    )
  ];
  let div_data_1 = {};
  for (let i = 0; i < div1_levels.length; i += 1) {
    div_data_1 = assign(div_data_1, div1_levels[i]);
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", {
        class: true,
        style: true,
        "aria-hidden": true,
        id: true,
        "data-mdc-tooltip-persist": true,
        "data-mdc-tooltip-persistent": true,
        "data-mdc-tooltip-has-caret": true,
        "data-hide-tooltip-from-screenreader": true
      });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true, style: true });
      var div0_nodes = children(div0);
      if (default_slot)
        default_slot.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div0, div_data);
      add_location(div0, file, 30, 2, 843);
      set_attributes(div1, div_data_1);
      add_location(div1, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[33](div1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div1,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[15].call(null, div1)),
          listen_dev(
            div1,
            "transitionend",
            /*transitionend_handler*/
            ctx[34],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[1] & /*$$scope*/
        1)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[31],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[31]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[31],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div0, div_data = get_spread_update(div0_levels, [
        (!current || dirty[0] & /*surface$class*/
        64 && div0_class_value !== (div0_class_value = classMap({
          [
            /*surface$class*/
            ctx2[6]
          ]: true,
          "mdc-tooltip__surface": true,
          "mdc-tooltip__surface-animation": true
        }))) && { class: div0_class_value },
        (!current || dirty[0] & /*surfaceAnimationStyles, surface$style*/
        8320 && div0_style_value !== (div0_style_value = Object.entries(
          /*surfaceAnimationStyles*/
          ctx2[13]
        ).map(func).concat([
          /*surface$style*/
          ctx2[7]
        ]).join(" "))) && { style: div0_style_value },
        dirty[0] & /*$$restProps*/
        524288 && prefixFilter(
          /*$$restProps*/
          ctx2[19],
          "surface$"
        )
      ]));
      set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
        (!current || dirty[0] & /*className, internalClasses*/
        1026 && div1_class_value !== (div1_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-tooltip": true,
          "mdc-tooltip--rich": (
            /*rich*/
            ctx2[18]
          ),
          .../*internalClasses*/
          ctx2[10]
        }))) && { class: div1_class_value },
        (!current || dirty[0] & /*internalStyles, style*/
        2052 && div1_style_value !== (div1_style_value = Object.entries(
          /*internalStyles*/
          ctx2[11]
        ).map(func_1).concat([
          /*style*/
          ctx2[2]
        ]).join(" "))) && { style: div1_style_value },
        { "aria-hidden": "true" },
        (!current || dirty[0] & /*id*/
        8) && { id: (
          /*id*/
          ctx2[3]
        ) },
        (!current || dirty[0] & /*persistent*/
        16 && div1_data_mdc_tooltip_persist_value !== (div1_data_mdc_tooltip_persist_value = /*rich*/
        ctx2[18] && /*persistent*/
        ctx2[4] ? "true" : void 0)) && {
          "data-mdc-tooltip-persist": div1_data_mdc_tooltip_persist_value
        },
        (!current || dirty[0] & /*persistent*/
        16 && div1_data_mdc_tooltip_persistent_value !== (div1_data_mdc_tooltip_persistent_value = /* MDC uses this attr, but document the one above */
        /*rich*/
        ctx2[18] && /*persistent*/
        ctx2[4] ? "true" : void 0)) && {
          "data-mdc-tooltip-persistent": div1_data_mdc_tooltip_persistent_value
        },
        { "data-mdc-tooltip-has-caret": void 0 },
        (!current || dirty[0] & /*hideFromScreenreader*/
        32 && div1_data_hide_tooltip_from_screenreader_value !== (div1_data_hide_tooltip_from_screenreader_value = /*hideFromScreenreader*/
        ctx2[5] ? "true" : void 0)) && {
          "data-hide-tooltip-from-screenreader": div1_data_hide_tooltip_from_screenreader_value
        },
        dirty[0] & /*roleProps*/
        16384 && /*roleProps*/
        ctx2[14],
        dirty[0] & /*internalAttrs*/
        4096 && /*internalAttrs*/
        ctx2[12],
        dirty[0] & /*$$restProps*/
        524288 && exclude(
          /*$$restProps*/
          ctx2[19],
          ["surface$"]
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if (default_slot)
        default_slot.d(detaching);
      ctx[33](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var counter = 0;
var func = ([name, value]) => `${name}: ${value};`;
var func_1 = ([name, value]) => `${name}: ${value};`;
function instance_1($$self, $$props, $$invalidate) {
  let roleProps;
  const omit_props_names = [
    "use",
    "class",
    "style",
    "id",
    "unbounded",
    "xPos",
    "yPos",
    "persistent",
    "interactive",
    "hideFromScreenreader",
    "showDelay",
    "hideDelay",
    "surface$class",
    "surface$style",
    "attachScrollHandler",
    "removeScrollHandler",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $anchor;
  let $tooltip;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Tooltip", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { id = "SMUI-tooltip-" + counter++ } = $$props;
  let { unbounded = false } = $$props;
  let { xPos = "detected" } = $$props;
  let { yPos = "detected" } = $$props;
  let { persistent = false } = $$props;
  let { interactive = persistent } = $$props;
  let { hideFromScreenreader = false } = $$props;
  let { showDelay = void 0 } = $$props;
  let { hideDelay = void 0 } = $$props;
  let { surface$class = "" } = $$props;
  let { surface$style = "" } = $$props;
  let element2;
  let instance2;
  let nonReactiveLocationStore = {
    setParent(value) {
      Object.defineProperty(this, "parent", { value });
    },
    setNextSibling(value) {
      Object.defineProperty(this, "nextSibling", { value });
    }
  };
  let internalClasses = {};
  let internalStyles = {};
  let internalAttrs = {};
  let surfaceAnimationStyles = {};
  let anchor = getContext("SMUI:tooltip:wrapper:anchor");
  validate_store(anchor, "anchor");
  component_subscribe($$self, anchor, (value) => $$invalidate(30, $anchor = value));
  let tooltip = getContext("SMUI:tooltip:wrapper:tooltip");
  validate_store(tooltip, "tooltip");
  component_subscribe($$self, tooltip, (value) => $$invalidate(35, $tooltip = value));
  const rich = getContext("SMUI:tooltip:rich");
  let previousAnchor = void 0;
  onMount(() => {
    $$invalidate(8, instance2 = new MDCTooltipFoundation({
      getAttribute: getAttr,
      setAttribute: addAttr,
      removeAttribute: removeAttr,
      addClass,
      hasClass,
      removeClass,
      getComputedStyleProperty: (propertyName) => {
        const element3 = getElement();
        let style2 = getComputedStyle(element3).getPropertyValue(propertyName);
        if (style2 === "auto") {
          element3.classList.add("smui-banner--force-show");
          style2 = getComputedStyle(element3).getPropertyValue(propertyName);
          element3.classList.remove("smui-banner--force-show");
        }
        return style2;
      },
      setStyleProperty: addStyle,
      setSurfaceAnimationStyleProperty: addSurfaceAnimationStyle,
      getViewportWidth: () => window.innerWidth,
      getViewportHeight: () => window.innerHeight,
      getTooltipSize: () => {
        const element3 = getElement();
        let size = {
          width: element3.offsetWidth,
          height: element3.offsetHeight
        };
        if (size.width === 0 || size.height === 0) {
          element3.classList.add("smui-banner--force-show");
          size = {
            width: element3.offsetWidth,
            height: element3.offsetHeight
          };
          element3.classList.remove("smui-banner--force-show");
        }
        return size;
      },
      getAnchorBoundingRect: () => {
        return $anchor ? $anchor.getBoundingClientRect() : null;
      },
      getParentBoundingRect: () => {
        let parent = getElement().parentElement;
        if (!rich) {
          parent = document.body;
        }
        return (parent === null || parent === void 0 ? void 0 : parent.getBoundingClientRect()) || null;
      },
      getAnchorAttribute: (attr) => {
        return $anchor ? $anchor.getAttribute(attr) : null;
      },
      setAnchorAttribute: (attr, value) => {
        $anchor && $anchor.setAttribute(attr, value);
      },
      isRTL: () => getComputedStyle(getElement()).direction === "rtl",
      anchorContainsElement: (element3) => {
        return !!($anchor && $anchor.contains(element3));
      },
      tooltipContainsElement: (element3) => {
        return getElement().contains(element3);
      },
      focusAnchorElement: () => {
        $anchor && $anchor.focus();
      },
      registerEventHandler: (evt, handler) => {
        getElement().addEventListener(evt, handler);
      },
      deregisterEventHandler: (evt, handler) => {
        getElement().removeEventListener(evt, handler);
      },
      registerAnchorEventHandler: (evt, handler) => {
        $anchor && $anchor.addEventListener(evt, handler);
      },
      deregisterAnchorEventHandler: (evt, handler) => {
        $anchor && $anchor.removeEventListener(evt, handler);
      },
      registerDocumentEventHandler: (evt, handler) => {
        document.body.addEventListener(evt, handler);
      },
      deregisterDocumentEventHandler: (evt, handler) => {
        document.body.removeEventListener(evt, handler);
      },
      registerWindowEventHandler: (evt, handler) => {
        window.addEventListener(evt, handler, evt === "scroll" && { capture: true, passive: true });
      },
      deregisterWindowEventHandler: (evt, handler) => {
        window.removeEventListener(evt, handler, evt === "scroll" && { capture: true, passive: true });
      },
      notifyHidden: () => {
        dispatch(getElement(), "SMUITooltip:hidden", void 0, void 0, true);
      },
      // TODO: figure out why MDC-Web included these caret functions, because they're entirely undocumented.
      getTooltipCaretBoundingRect: () => {
        const caret = getElement().querySelector(`.${CssClasses.TOOLTIP_CARET_TOP}`);
        if (!caret) {
          return null;
        }
        return caret.getBoundingClientRect();
      },
      setTooltipCaretStyle: (propertyName, value) => {
        const topCaret = getElement().querySelector(`.${CssClasses.TOOLTIP_CARET_TOP}`);
        const bottomCaret = getElement().querySelector(`.${CssClasses.TOOLTIP_CARET_BOTTOM}`);
        if (!topCaret || !bottomCaret) {
          return;
        }
        topCaret.style.setProperty(propertyName, value);
        bottomCaret.style.setProperty(propertyName, value);
      },
      clearTooltipCaretStyles: () => {
        const topCaret = getElement().querySelector(`.${CssClasses.TOOLTIP_CARET_TOP}`);
        const bottomCaret = getElement().querySelector(`.${CssClasses.TOOLTIP_CARET_BOTTOM}`);
        if (!topCaret || !bottomCaret) {
          return;
        }
        topCaret.removeAttribute("style");
        bottomCaret.removeAttribute("style");
      },
      getActiveElement: () => document.activeElement
    }));
    set_store_value(tooltip, $tooltip = element2, $tooltip);
    return () => {
      if ($anchor) {
        destroy($anchor);
      }
    };
  });
  onDestroy(() => {
    var _a;
    if (!rich && typeof document !== "undefined" && document.body === getElement().parentElement && nonReactiveLocationStore.parent !== getElement().parentElement && ((_a = nonReactiveLocationStore.parent) === null || _a === void 0 ? void 0 : _a.insertBefore) && nonReactiveLocationStore.nextSibling) {
      nonReactiveLocationStore.parent.insertBefore(getElement(), nonReactiveLocationStore.nextSibling);
    }
  });
  function destroy(anchor2) {
    anchor2.removeEventListener("focusout", handleAnchorFocusOut);
    if (rich && persistent) {
      anchor2.removeEventListener("click", handleAnchorActivate);
      anchor2.removeEventListener("keydown", handleAnchorActivate);
    } else {
      anchor2.removeEventListener("mouseenter", handleAnchorMouseEnter);
      anchor2.removeEventListener("focusin", handleAnchorFocus);
      anchor2.removeEventListener("mouseleave", handleAnchorMouseLeave);
      anchor2.removeEventListener("touchstart", handleAnchorTouchStart);
      anchor2.removeEventListener("touchend", handleAnchorTouchEnd);
    }
    if (rich && interactive) {
      anchor2.removeAttribute("aria-haspopup");
      anchor2.removeAttribute("aria-expanded");
      anchor2.removeAttribute("data-tooltip-id");
    } else {
      anchor2.removeAttribute("aria-describedby");
    }
    instance2.destroy();
  }
  function init2(anchor2) {
    anchor2.addEventListener("focusout", handleAnchorFocusOut);
    if (rich && persistent) {
      anchor2.addEventListener("click", handleAnchorActivate);
      anchor2.addEventListener("keydown", handleAnchorActivate);
    } else {
      anchor2.addEventListener("mouseenter", handleAnchorMouseEnter);
      anchor2.addEventListener("focusin", handleAnchorFocus);
      anchor2.addEventListener("mouseleave", handleAnchorMouseLeave);
      anchor2.addEventListener("touchstart", handleAnchorTouchStart);
      anchor2.addEventListener("touchend", handleAnchorTouchEnd);
    }
    if (rich && interactive) {
      anchor2.setAttribute("aria-haspopup", "dialog");
      anchor2.setAttribute("aria-expanded", "false");
      anchor2.setAttribute("data-tooltip-id", id);
    } else {
      anchor2.setAttribute("aria-describedby", id);
    }
    if (!rich) {
      hoistToBody();
    }
    instance2.init();
  }
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(10, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(10, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(11, internalStyles);
      } else {
        $$invalidate(11, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function addSurfaceAnimationStyle(name, value) {
    if (surfaceAnimationStyles[name] != value) {
      if (value === "" || value == null) {
        delete surfaceAnimationStyles[name];
        $$invalidate(13, surfaceAnimationStyles);
      } else {
        $$invalidate(13, surfaceAnimationStyles[name] = value, surfaceAnimationStyles);
      }
    }
  }
  function getAttr(name) {
    var _a;
    return name in internalAttrs ? (_a = internalAttrs[name]) !== null && _a !== void 0 ? _a : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(12, internalAttrs[name] = value, internalAttrs);
    }
  }
  function removeAttr(name) {
    if (!(name in internalAttrs) || internalAttrs[name] != null) {
      $$invalidate(12, internalAttrs[name] = void 0, internalAttrs);
    }
  }
  function handleAnchorFocusOut(event) {
    if (element2.contains(event.relatedTarget)) {
      return;
    }
    instance2 && instance2.hide();
  }
  function handleAnchorActivate(event) {
    if (event.type === "keydown" && event.key !== "Enter" && event.key !== " ") {
      return;
    }
    instance2 && instance2.handleAnchorClick();
  }
  function handleAnchorMouseEnter() {
    instance2 && instance2.handleAnchorMouseEnter();
  }
  function handleAnchorFocus(event) {
    instance2 && instance2.handleAnchorFocus(event);
  }
  function handleAnchorMouseLeave() {
    instance2 && instance2.handleAnchorMouseLeave();
  }
  function handleAnchorTouchStart() {
    instance2 && instance2.handleAnchorTouchstart();
  }
  function handleAnchorTouchEnd() {
    instance2 && instance2.handleAnchorTouchend();
  }
  function hoistToBody() {
    var _a, _b;
    if ($anchor && document.body !== getElement().parentNode) {
      nonReactiveLocationStore.setParent((_a = getElement().parentElement) !== null && _a !== void 0 ? _a : void 0);
      nonReactiveLocationStore.setNextSibling((_b = getElement().nextElementSibling) !== null && _b !== void 0 ? _b : void 0);
      document.body.appendChild(getElement());
    }
  }
  function attachScrollHandler(addEventListenerFn) {
    instance2 && instance2.attachScrollHandler(addEventListenerFn);
  }
  function removeScrollHandler(removeEventHandlerFn) {
    instance2 && instance2.removeScrollHandler(removeEventHandlerFn);
  }
  function getElement() {
    return element2;
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(9, element2);
    });
  }
  const transitionend_handler = () => instance2 && instance2.handleTransitionEnd();
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("id" in $$new_props)
      $$invalidate(3, id = $$new_props.id);
    if ("unbounded" in $$new_props)
      $$invalidate(20, unbounded = $$new_props.unbounded);
    if ("xPos" in $$new_props)
      $$invalidate(21, xPos = $$new_props.xPos);
    if ("yPos" in $$new_props)
      $$invalidate(22, yPos = $$new_props.yPos);
    if ("persistent" in $$new_props)
      $$invalidate(4, persistent = $$new_props.persistent);
    if ("interactive" in $$new_props)
      $$invalidate(23, interactive = $$new_props.interactive);
    if ("hideFromScreenreader" in $$new_props)
      $$invalidate(5, hideFromScreenreader = $$new_props.hideFromScreenreader);
    if ("showDelay" in $$new_props)
      $$invalidate(24, showDelay = $$new_props.showDelay);
    if ("hideDelay" in $$new_props)
      $$invalidate(25, hideDelay = $$new_props.hideDelay);
    if ("surface$class" in $$new_props)
      $$invalidate(6, surface$class = $$new_props.surface$class);
    if ("surface$style" in $$new_props)
      $$invalidate(7, surface$style = $$new_props.surface$style);
    if ("$$scope" in $$new_props)
      $$invalidate(31, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    counter,
    MDCTooltipFoundation,
    AnchorBoundaryType,
    XPosition,
    YPosition,
    CssClasses,
    onMount,
    onDestroy,
    getContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    exclude,
    prefixFilter,
    useActions,
    dispatch,
    forwardEvents,
    use,
    className,
    style,
    id,
    unbounded,
    xPos,
    yPos,
    persistent,
    interactive,
    hideFromScreenreader,
    showDelay,
    hideDelay,
    surface$class,
    surface$style,
    element: element2,
    instance: instance2,
    nonReactiveLocationStore,
    internalClasses,
    internalStyles,
    internalAttrs,
    surfaceAnimationStyles,
    anchor,
    tooltip,
    rich,
    previousAnchor,
    destroy,
    init: init2,
    hasClass,
    addClass,
    removeClass,
    addStyle,
    addSurfaceAnimationStyle,
    getAttr,
    addAttr,
    removeAttr,
    handleAnchorFocusOut,
    handleAnchorActivate,
    handleAnchorMouseEnter,
    handleAnchorFocus,
    handleAnchorMouseLeave,
    handleAnchorTouchStart,
    handleAnchorTouchEnd,
    hoistToBody,
    attachScrollHandler,
    removeScrollHandler,
    getElement,
    roleProps,
    $anchor,
    $tooltip
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(2, style = $$new_props.style);
    if ("id" in $$props)
      $$invalidate(3, id = $$new_props.id);
    if ("unbounded" in $$props)
      $$invalidate(20, unbounded = $$new_props.unbounded);
    if ("xPos" in $$props)
      $$invalidate(21, xPos = $$new_props.xPos);
    if ("yPos" in $$props)
      $$invalidate(22, yPos = $$new_props.yPos);
    if ("persistent" in $$props)
      $$invalidate(4, persistent = $$new_props.persistent);
    if ("interactive" in $$props)
      $$invalidate(23, interactive = $$new_props.interactive);
    if ("hideFromScreenreader" in $$props)
      $$invalidate(5, hideFromScreenreader = $$new_props.hideFromScreenreader);
    if ("showDelay" in $$props)
      $$invalidate(24, showDelay = $$new_props.showDelay);
    if ("hideDelay" in $$props)
      $$invalidate(25, hideDelay = $$new_props.hideDelay);
    if ("surface$class" in $$props)
      $$invalidate(6, surface$class = $$new_props.surface$class);
    if ("surface$style" in $$props)
      $$invalidate(7, surface$style = $$new_props.surface$style);
    if ("element" in $$props)
      $$invalidate(9, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(8, instance2 = $$new_props.instance);
    if ("nonReactiveLocationStore" in $$props)
      nonReactiveLocationStore = $$new_props.nonReactiveLocationStore;
    if ("internalClasses" in $$props)
      $$invalidate(10, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(11, internalStyles = $$new_props.internalStyles);
    if ("internalAttrs" in $$props)
      $$invalidate(12, internalAttrs = $$new_props.internalAttrs);
    if ("surfaceAnimationStyles" in $$props)
      $$invalidate(13, surfaceAnimationStyles = $$new_props.surfaceAnimationStyles);
    if ("anchor" in $$props)
      $$invalidate(16, anchor = $$new_props.anchor);
    if ("tooltip" in $$props)
      $$invalidate(17, tooltip = $$new_props.tooltip);
    if ("previousAnchor" in $$props)
      $$invalidate(29, previousAnchor = $$new_props.previousAnchor);
    if ("roleProps" in $$props)
      $$invalidate(14, roleProps = $$new_props.roleProps);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*interactive, persistent*/
    8388624) {
      $:
        $$invalidate(14, roleProps = {
          role: rich && interactive ? "dialog" : "tooltip",
          tabindex: rich && persistent ? -1 : void 0
        });
    }
    if ($$self.$$.dirty[0] & /*instance, previousAnchor, $anchor*/
    1610612992) {
      $:
        if (instance2 && previousAnchor !== $anchor) {
          if (previousAnchor) {
            destroy(previousAnchor);
          }
          if ($anchor) {
            init2($anchor);
          }
          $$invalidate(29, previousAnchor = $anchor);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, unbounded*/
    1048832) {
      $:
        if (instance2) {
          instance2.setAnchorBoundaryType(AnchorBoundaryType[unbounded ? "UNBOUNDED" : "BOUNDED"]);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, xPos, yPos*/
    6291712) {
      $:
        if (instance2) {
          instance2.setTooltipPosition({
            xPos: XPosition[xPos.toUpperCase()],
            yPos: YPosition[yPos.toUpperCase()]
          });
        }
    }
    if ($$self.$$.dirty[0] & /*instance, showDelay*/
    16777472) {
      $:
        if (instance2 && showDelay != null) {
          instance2.setShowDelay(showDelay);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, hideDelay*/
    33554688) {
      $:
        if (instance2 && hideDelay != null) {
          instance2.setHideDelay(hideDelay);
        }
    }
  };
  return [
    use,
    className,
    style,
    id,
    persistent,
    hideFromScreenreader,
    surface$class,
    surface$style,
    instance2,
    element2,
    internalClasses,
    internalStyles,
    internalAttrs,
    surfaceAnimationStyles,
    roleProps,
    forwardEvents,
    anchor,
    tooltip,
    rich,
    $$restProps,
    unbounded,
    xPos,
    yPos,
    interactive,
    showDelay,
    hideDelay,
    attachScrollHandler,
    removeScrollHandler,
    getElement,
    previousAnchor,
    $anchor,
    $$scope,
    slots,
    div1_binding,
    transitionend_handler
  ];
}
var Tooltip = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance_1,
      create_fragment,
      safe_not_equal,
      {
        use: 0,
        class: 1,
        style: 2,
        id: 3,
        unbounded: 20,
        xPos: 21,
        yPos: 22,
        persistent: 4,
        interactive: 23,
        hideFromScreenreader: 5,
        showDelay: 24,
        hideDelay: 25,
        surface$class: 6,
        surface$style: 7,
        attachScrollHandler: 26,
        removeScrollHandler: 27,
        getElement: 28
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Tooltip",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get unbounded() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set unbounded(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get xPos() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set xPos(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get yPos() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set yPos(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get persistent() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set persistent(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get interactive() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set interactive(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hideFromScreenreader() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hideFromScreenreader(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get showDelay() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set showDelay(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hideDelay() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hideDelay(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get surface$class() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set surface$class(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get surface$style() {
    throw new Error("<Tooltip>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set surface$style(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get attachScrollHandler() {
    return this.$$.ctx[26];
  }
  set attachScrollHandler(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get removeScrollHandler() {
    return this.$$.ctx[27];
  }
  set removeScrollHandler(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[28];
  }
  set getElement(value) {
    throw new Error("<Tooltip>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Tooltip_default = Tooltip;

// node_modules/@smui/tooltip/dist/Wrapper.svelte
var file2 = "node_modules/@smui/tooltip/dist/Wrapper.svelte";
function create_else_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(14:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div;
  let div_class_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-tooltip-wrapper--rich": true
      })
    },
    /*$$restProps*/
    ctx[7]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file2, 1, 2, 13);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[13](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[4].call(null, div))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className*/
        2 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-tooltip-wrapper--rich": true
        }))) && { class: div_class_value },
        dirty & /*$$restProps*/
        128 && /*$$restProps*/
        ctx2[7]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if (default_slot)
        default_slot.d(detaching);
      ctx[13](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(1:0) {#if rich}",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*rich*/
      ctx2[2]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "rich", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $tooltip;
  let $anchor;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Wrapper", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { rich = false } = $$props;
  let element2;
  const anchor = writable(void 0);
  validate_store(anchor, "anchor");
  component_subscribe($$self, anchor, (value) => $$invalidate(10, $anchor = value));
  const tooltip = writable(void 0);
  validate_store(tooltip, "tooltip");
  component_subscribe($$self, tooltip, (value) => $$invalidate(9, $tooltip = value));
  setContext("SMUI:tooltip:wrapper:anchor", anchor);
  setContext("SMUI:tooltip:wrapper:tooltip", tooltip);
  setContext("SMUI:tooltip:rich", rich);
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(3, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("rich" in $$new_props)
      $$invalidate(2, rich = $$new_props.rich);
    if ("$$scope" in $$new_props)
      $$invalidate(11, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    writable,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    forwardEvents,
    use,
    className,
    rich,
    element: element2,
    anchor,
    tooltip,
    getElement,
    $tooltip,
    $anchor
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("rich" in $$props)
      $$invalidate(2, rich = $$new_props.rich);
    if ("element" in $$props)
      $$invalidate(3, element2 = $$new_props.element);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$tooltip, $anchor*/
    1536) {
      $:
        if ($tooltip && !$anchor) {
          set_store_value(anchor, $anchor = $tooltip.previousElementSibling, $anchor);
        }
    }
  };
  return [
    use,
    className,
    rich,
    element2,
    forwardEvents,
    anchor,
    tooltip,
    $$restProps,
    getElement,
    $tooltip,
    $anchor,
    $$scope,
    slots,
    div_binding
  ];
}
var Wrapper = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment2, safe_not_equal, { use: 0, class: 1, rich: 2, getElement: 8 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Wrapper",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error("<Wrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Wrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Wrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Wrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get rich() {
    throw new Error("<Wrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set rich(value) {
    throw new Error("<Wrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[8];
  }
  set getElement(value) {
    throw new Error("<Wrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Wrapper_default = Wrapper;

// node_modules/@smui/tooltip/dist/Title.js
var Title_default = classAdderBuilder({
  class: "mdc-tooltip__title",
  tag: "h2"
});

// node_modules/@smui/tooltip/dist/Content.js
var Content_default = classAdderBuilder({
  class: "mdc-tooltip__content",
  tag: "div"
});

// node_modules/@smui/tooltip/dist/Link.js
var Link_default = classAdderBuilder({
  class: "mdc-tooltip__content-link",
  tag: "a"
});

// node_modules/@smui/tooltip/dist/RichActions.js
var RichActions_default = classAdderBuilder({
  class: "mdc-tooltip--rich-actions",
  tag: "div",
  contexts: {
    "SMUI:button:context": "tooltip:rich-actions"
  }
});

// node_modules/@smui/tooltip/dist/index.js
var dist_default = Tooltip_default;
export {
  Content_default as Content,
  Link_default as Link,
  RichActions_default as RichActions,
  Title_default as Title,
  Wrapper_default as Wrapper,
  dist_default as default
};
//# sourceMappingURL=@smui_tooltip.js.map
