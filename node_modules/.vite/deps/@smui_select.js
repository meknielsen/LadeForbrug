import {
  Anchor,
  dist_default as dist_default3
} from "./chunk-XZSYJWFL.js";
import {
  Item_default,
  dist_default as dist_default2
} from "./chunk-Q6ZV7OWU.js";
import {
  dist_default as dist_default4,
  dist_default2 as dist_default5,
  dist_default3 as dist_default6
} from "./chunk-2GUUD6LY.js";
import {
  dist_default
} from "./chunk-5TZEHB4H.js";
import {
  MDCSelectFoundation,
  MDCSelectHelperTextFoundation
} from "./chunk-XBYAYQHB.js";
import "./chunk-4A4BTEVT.js";
import "./chunk-OOLV2UUU.js";
import "./chunk-SYN3ZQOA.js";
import "./chunk-3OQIXQ3A.js";
import "./chunk-5UQOTSBG.js";
import "./chunk-66Z33U5L.js";
import "./chunk-OMHVMQLZ.js";
import "./chunk-4CFL5FTA.js";
import "./chunk-UL5GDP5I.js";
import {
  writable
} from "./chunk-E6ZP6LG5.js";
import {
  classMap,
  dispatch,
  exclude,
  forwardEventsBuilder,
  prefixFilter,
  useActions
} from "./chunk-DXJYLXNN.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_flush_callback,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  bind,
  binding_callbacks,
  bubble,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  claim_svg_element,
  claim_text,
  component_subscribe,
  compute_rest_props,
  compute_slots,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  noop,
  onDestroy,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  set_data_dev,
  set_data_maybe_contenteditable_dev,
  set_store_value,
  space,
  svg_element,
  text,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-RVLVW3YK.js";
import "./chunk-WWHO7WGW.js";
import {
  DefaultFocusState
} from "./chunk-EYBNP4YI.js";
import "./chunk-W4OU4FMO.js";
import "./chunk-HZH52R65.js";
import "./chunk-J7F4NX7A.js";
import "./chunk-WBANSRPK.js";
import "./chunk-BOISVMCQ.js";
import "./chunk-CTXZTH3U.js";
import "./chunk-QD4CF75S.js";
import "./chunk-ZYEEMGQD.js";
import "./chunk-AOEPRBHD.js";
import "./chunk-6SECFJDV.js";
import "./chunk-BCZPS35K.js";
import "./chunk-5XZPH2TV.js";
import "./chunk-LENT37JJ.js";
import "./chunk-ZC22LKFR.js";

// node_modules/@smui/select/dist/helper-text/HelperText.svelte
var file = "node_modules/@smui/select/dist/helper-text/HelperText.svelte";
function create_else_block(ctx) {
  let t;
  const block = {
    c: function create() {
      t = text(
        /*content*/
        ctx[8]
      );
    },
    l: function claim(nodes) {
      t = claim_text(
        nodes,
        /*content*/
        ctx[8]
      );
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*content*/
      256)
        set_data_dev(
          t,
          /*content*/
          ctx2[8]
        );
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(t);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(17:31) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[13].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(17:2) {#if content == null}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let div_class_value;
  let div_aria_hidden_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*content*/
      ctx2[8] == null
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-select-helper-text": true,
        "mdc-select-helper-text--validation-msg": (
          /*validationMsg*/
          ctx[4]
        ),
        "mdc-select-helper-text--validation-msg-persistent": (
          /*persistent*/
          ctx[3]
        ),
        .../*internalClasses*/
        ctx[6]
      })
    },
    {
      "aria-hidden": div_aria_hidden_value = /*persistent*/
      ctx[3] ? void 0 : "true"
    },
    { id: (
      /*id*/
      ctx[2]
    ) },
    /*internalAttrs*/
    ctx[7],
    /*$$restProps*/
    ctx[10]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", {
        class: true,
        "aria-hidden": true,
        id: true
      });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      ctx[14](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[9].call(null, div))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, validationMsg, persistent, internalClasses*/
        90 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-select-helper-text": true,
          "mdc-select-helper-text--validation-msg": (
            /*validationMsg*/
            ctx2[4]
          ),
          "mdc-select-helper-text--validation-msg-persistent": (
            /*persistent*/
            ctx2[3]
          ),
          .../*internalClasses*/
          ctx2[6]
        }))) && { class: div_class_value },
        (!current || dirty & /*persistent*/
        8 && div_aria_hidden_value !== (div_aria_hidden_value = /*persistent*/
        ctx2[3] ? void 0 : "true")) && { "aria-hidden": div_aria_hidden_value },
        (!current || dirty & /*id*/
        4) && { id: (
          /*id*/
          ctx2[2]
        ) },
        dirty & /*internalAttrs*/
        128 && /*internalAttrs*/
        ctx2[7],
        dirty & /*$$restProps*/
        1024 && /*$$restProps*/
        ctx2[10]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      if_blocks[current_block_type_index].d();
      ctx[14](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var counter = 0;
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "id", "persistent", "validationMsg", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("HelperText", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { id = "SMUI-select-helper-text-" + counter++ } = $$props;
  let { persistent = false } = $$props;
  let { validationMsg = false } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalAttrs = {};
  let content = void 0;
  onMount(() => {
    instance2 = new MDCSelectHelperTextFoundation({
      addClass,
      removeClass,
      hasClass,
      getAttr,
      setAttr: addAttr,
      removeAttr,
      setContent: (value) => {
        $$invalidate(8, content = value);
      }
    });
    if (id.startsWith("SMUI-select-helper-text-")) {
      dispatch(getElement(), "SMUISelectHelperText:id", id);
    }
    dispatch(getElement(), "SMUISelectHelperText:mount", instance2);
    instance2.init();
    return () => {
      dispatch(getElement(), "SMUISelectHelperText:unmount", instance2);
      instance2.destroy();
    };
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = false, internalClasses);
    }
  }
  function getAttr(name) {
    var _a;
    return name in internalAttrs ? (_a = internalAttrs[name]) !== null && _a !== void 0 ? _a : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(7, internalAttrs[name] = value, internalAttrs);
    }
  }
  function removeAttr(name) {
    if (!(name in internalAttrs) || internalAttrs[name] != null) {
      $$invalidate(7, internalAttrs[name] = void 0, internalAttrs);
    }
  }
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(10, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("id" in $$new_props)
      $$invalidate(2, id = $$new_props.id);
    if ("persistent" in $$new_props)
      $$invalidate(3, persistent = $$new_props.persistent);
    if ("validationMsg" in $$new_props)
      $$invalidate(4, validationMsg = $$new_props.validationMsg);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    counter,
    MDCSelectHelperTextFoundation,
    onMount,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    forwardEvents,
    use,
    className,
    id,
    persistent,
    validationMsg,
    element: element2,
    instance: instance2,
    internalClasses,
    internalAttrs,
    content,
    hasClass,
    addClass,
    removeClass,
    getAttr,
    addAttr,
    removeAttr,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("id" in $$props)
      $$invalidate(2, id = $$new_props.id);
    if ("persistent" in $$props)
      $$invalidate(3, persistent = $$new_props.persistent);
    if ("validationMsg" in $$props)
      $$invalidate(4, validationMsg = $$new_props.validationMsg);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("instance" in $$props)
      instance2 = $$new_props.instance;
    if ("internalClasses" in $$props)
      $$invalidate(6, internalClasses = $$new_props.internalClasses);
    if ("internalAttrs" in $$props)
      $$invalidate(7, internalAttrs = $$new_props.internalAttrs);
    if ("content" in $$props)
      $$invalidate(8, content = $$new_props.content);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    id,
    persistent,
    validationMsg,
    element2,
    internalClasses,
    internalAttrs,
    content,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    div_binding
  ];
}
var HelperText = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      id: 2,
      persistent: 3,
      validationMsg: 4,
      getElement: 11
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "HelperText",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get id() {
    throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get persistent() {
    throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set persistent(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get validationMsg() {
    throw new Error("<HelperText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set validationMsg(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[11];
  }
  set getElement(value) {
    throw new Error("<HelperText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var HelperText_default = HelperText;

// node_modules/@smui/select/dist/Select.svelte
var file2 = "node_modules/@smui/select/dist/Select.svelte";
var get_helperText_slot_changes = (dirty) => ({});
var get_helperText_slot_context = (ctx) => ({});
var get_leadingIcon_slot_changes = (dirty) => ({});
var get_leadingIcon_slot_context = (ctx) => ({});
var get_label_slot_changes_1 = (dirty) => ({});
var get_label_slot_context_1 = (ctx) => ({});
var get_label_slot_changes = (dirty) => ({});
var get_label_slot_context = (ctx) => ({});
function create_if_block_6(ctx) {
  let input;
  let input_levels = [
    { type: "hidden" },
    { required: (
      /*required*/
      ctx[10]
    ) },
    { disabled: (
      /*disabled*/
      ctx[6]
    ) },
    { value: (
      /*value*/
      ctx[0]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "input$"
    )
  ];
  let input_data = {};
  for (let i = 0; i < input_levels.length; i += 1) {
    input_data = assign(input_data, input_levels[i]);
  }
  const block = {
    c: function create() {
      input = element("input");
      this.h();
    },
    l: function claim(nodes) {
      input = claim_element(nodes, "INPUT", { type: true });
      this.h();
    },
    h: function hydrate() {
      set_attributes(input, input_data);
      add_location(input, file2, 51, 4, 1440);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, input, anchor);
      if (input.autofocus)
        input.focus();
    },
    p: function update(ctx2, dirty) {
      set_attributes(input, input_data = get_spread_update(input_levels, [
        { type: "hidden" },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[0] & /*disabled*/
        64 && { disabled: (
          /*disabled*/
          ctx2[6]
        ) },
        dirty[0] & /*value*/
        1 && { value: (
          /*value*/
          ctx2[0]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "input$"
        )
      ]));
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(input);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_6.name,
    type: "if",
    source: "(51:2) {#if hiddenInput}",
    ctx
  });
  return block;
}
function create_if_block_5(ctx) {
  let span;
  const block = {
    c: function create() {
      span = element("span");
      this.h();
    },
    l: function claim(nodes) {
      span = claim_element(nodes, "SPAN", { class: true });
      children(span).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "mdc-select__ripple");
      add_location(span, file2, 88, 6, 2452);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, span, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_5.name,
    type: "if",
    source: "(88:4) {#if variant === 'filled'}",
    ctx
  });
  return block;
}
function create_if_block_4(ctx) {
  let floatinglabel;
  let current;
  const floatinglabel_spread_levels = [
    { id: (
      /*inputId*/
      ctx[11] + "-smui-label"
    ) },
    {
      floatAbove: (
        /*$selectedTextStore*/
        ctx[42] !== ""
      )
    },
    { required: (
      /*required*/
      ctx[10]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "label$"
    )
  ];
  let floatinglabel_props = {
    $$slots: { default: [create_default_slot_5] },
    $$scope: { ctx }
  };
  for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
  }
  floatinglabel = new dist_default4({
    props: floatinglabel_props,
    $$inline: true
  });
  ctx[67](floatinglabel);
  const block = {
    c: function create() {
      create_component(floatinglabel.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(floatinglabel.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(floatinglabel, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const floatinglabel_changes = dirty[0] & /*inputId, required*/
      3072 | dirty[1] & /*$selectedTextStore, $$restProps*/
      4196352 ? get_spread_update(floatinglabel_spread_levels, [
        dirty[0] & /*inputId*/
        2048 && { id: (
          /*inputId*/
          ctx2[11] + "-smui-label"
        ) },
        dirty[1] & /*$selectedTextStore*/
        2048 && {
          floatAbove: (
            /*$selectedTextStore*/
            ctx2[42] !== ""
          )
        },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "label$"
        ))
      ]) : {};
      if (dirty[0] & /*label*/
      512 | dirty[2] & /*$$scope*/
      33554432) {
        floatinglabel_changes.$$scope = { dirty, ctx: ctx2 };
      }
      floatinglabel.$set(floatinglabel_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(floatinglabel.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(floatinglabel.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[67](null);
      destroy_component(floatinglabel, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(91:4) {#if variant !== 'outlined' && !noLabel && (label != null || $$slots.label)}",
    ctx
  });
  return block;
}
function create_default_slot_5(ctx) {
  let t_value = (
    /*label*/
    (ctx[9] == null ? "" : (
      /*label*/
      ctx[9]
    )) + ""
  );
  let t;
  let current;
  const label_slot_template = (
    /*#slots*/
    ctx[64].label
  );
  const label_slot = create_slot(
    label_slot_template,
    ctx,
    /*$$scope*/
    ctx[87],
    get_label_slot_context
  );
  const block = {
    c: function create() {
      t = text(t_value);
      if (label_slot)
        label_slot.c();
    },
    l: function claim(nodes) {
      t = claim_text(nodes, t_value);
      if (label_slot)
        label_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
      if (label_slot) {
        label_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if ((!current || dirty[0] & /*label*/
      512) && t_value !== (t_value = /*label*/
      (ctx2[9] == null ? "" : (
        /*label*/
        ctx2[9]
      )) + ""))
        set_data_dev(t, t_value);
      if (label_slot) {
        if (label_slot.p && (!current || dirty[2] & /*$$scope*/
        33554432)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[87],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[87]
            ) : get_slot_changes(
              label_slot_template,
              /*$$scope*/
              ctx2[87],
              dirty,
              get_label_slot_changes
            ),
            get_label_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(label_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(label_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(t);
      if (label_slot)
        label_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_5.name,
    type: "slot",
    source: "(92:6) <FloatingLabel         bind:this={floatingLabel}         id={inputId + '-smui-label'}         floatAbove={$selectedTextStore !== ''}         {required}         {...prefixFilter($$restProps, 'label$')}         >",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let notchedoutline;
  let current;
  const notchedoutline_spread_levels = [
    {
      noLabel: (
        /*noLabel*/
        ctx[8] || /*label*/
        ctx[9] == null && !/*$$slots*/
        ctx[54].label
      )
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "outline$"
    )
  ];
  let notchedoutline_props = {
    $$slots: { default: [create_default_slot_3] },
    $$scope: { ctx }
  };
  for (let i = 0; i < notchedoutline_spread_levels.length; i += 1) {
    notchedoutline_props = assign(notchedoutline_props, notchedoutline_spread_levels[i]);
  }
  notchedoutline = new dist_default6({
    props: notchedoutline_props,
    $$inline: true
  });
  ctx[69](notchedoutline);
  const block = {
    c: function create() {
      create_component(notchedoutline.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(notchedoutline.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(notchedoutline, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const notchedoutline_changes = dirty[0] & /*noLabel, label*/
      768 | dirty[1] & /*$$slots, $$restProps*/
      12582912 ? get_spread_update(notchedoutline_spread_levels, [
        dirty[0] & /*noLabel, label*/
        768 | dirty[1] & /*$$slots*/
        8388608 && {
          noLabel: (
            /*noLabel*/
            ctx2[8] || /*label*/
            ctx2[9] == null && !/*$$slots*/
            ctx2[54].label
          )
        },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "outline$"
        ))
      ]) : {};
      if (dirty[0] & /*inputId, required, label, noLabel*/
      3840 | dirty[1] & /*$selectedTextStore, $$restProps, floatingLabel, $$slots*/
      12585216 | dirty[2] & /*$$scope*/
      33554432) {
        notchedoutline_changes.$$scope = { dirty, ctx: ctx2 };
      }
      notchedoutline.$set(notchedoutline_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(notchedoutline.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(notchedoutline.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[69](null);
      destroy_component(notchedoutline, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(101:4) {#if variant === 'outlined'}",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let floatinglabel;
  let current;
  const floatinglabel_spread_levels = [
    { id: (
      /*inputId*/
      ctx[11] + "-smui-label"
    ) },
    {
      floatAbove: (
        /*$selectedTextStore*/
        ctx[42] !== ""
      )
    },
    { required: (
      /*required*/
      ctx[10]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "label$"
    )
  ];
  let floatinglabel_props = {
    $$slots: { default: [create_default_slot_4] },
    $$scope: { ctx }
  };
  for (let i = 0; i < floatinglabel_spread_levels.length; i += 1) {
    floatinglabel_props = assign(floatinglabel_props, floatinglabel_spread_levels[i]);
  }
  floatinglabel = new dist_default4({
    props: floatinglabel_props,
    $$inline: true
  });
  ctx[68](floatinglabel);
  const block = {
    c: function create() {
      create_component(floatinglabel.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(floatinglabel.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(floatinglabel, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const floatinglabel_changes = dirty[0] & /*inputId, required*/
      3072 | dirty[1] & /*$selectedTextStore, $$restProps*/
      4196352 ? get_spread_update(floatinglabel_spread_levels, [
        dirty[0] & /*inputId*/
        2048 && { id: (
          /*inputId*/
          ctx2[11] + "-smui-label"
        ) },
        dirty[1] & /*$selectedTextStore*/
        2048 && {
          floatAbove: (
            /*$selectedTextStore*/
            ctx2[42] !== ""
          )
        },
        dirty[0] & /*required*/
        1024 && { required: (
          /*required*/
          ctx2[10]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "label$"
        ))
      ]) : {};
      if (dirty[0] & /*label*/
      512 | dirty[2] & /*$$scope*/
      33554432) {
        floatinglabel_changes.$$scope = { dirty, ctx: ctx2 };
      }
      floatinglabel.$set(floatinglabel_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(floatinglabel.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(floatinglabel.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[68](null);
      destroy_component(floatinglabel, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(107:8) {#if !noLabel && (label != null || $$slots.label)}",
    ctx
  });
  return block;
}
function create_default_slot_4(ctx) {
  let t_value = (
    /*label*/
    (ctx[9] == null ? "" : (
      /*label*/
      ctx[9]
    )) + ""
  );
  let t;
  let current;
  const label_slot_template = (
    /*#slots*/
    ctx[64].label
  );
  const label_slot = create_slot(
    label_slot_template,
    ctx,
    /*$$scope*/
    ctx[87],
    get_label_slot_context_1
  );
  const block = {
    c: function create() {
      t = text(t_value);
      if (label_slot)
        label_slot.c();
    },
    l: function claim(nodes) {
      t = claim_text(nodes, t_value);
      if (label_slot)
        label_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
      if (label_slot) {
        label_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if ((!current || dirty[0] & /*label*/
      512) && t_value !== (t_value = /*label*/
      (ctx2[9] == null ? "" : (
        /*label*/
        ctx2[9]
      )) + ""))
        set_data_dev(t, t_value);
      if (label_slot) {
        if (label_slot.p && (!current || dirty[2] & /*$$scope*/
        33554432)) {
          update_slot_base(
            label_slot,
            label_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[87],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[87]
            ) : get_slot_changes(
              label_slot_template,
              /*$$scope*/
              ctx2[87],
              dirty,
              get_label_slot_changes_1
            ),
            get_label_slot_context_1
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(label_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(label_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(t);
      if (label_slot)
        label_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_4.name,
    type: "slot",
    source: "(108:10) <FloatingLabel             bind:this={floatingLabel}             id={inputId + '-smui-label'}             floatAbove={$selectedTextStore !== ''}             {required}             {...prefixFilter($$restProps, 'label$')}             >",
    ctx
  });
  return block;
}
function create_default_slot_3(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !/*noLabel*/
  ctx[8] && /*label*/
  (ctx[9] != null || /*$$slots*/
  ctx[54].label) && create_if_block_3(ctx);
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (!/*noLabel*/
      ctx2[8] && /*label*/
      (ctx2[9] != null || /*$$slots*/
      ctx2[54].label)) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[0] & /*noLabel, label*/
          768 | dirty[1] & /*$$slots*/
          8388608) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_3.name,
    type: "slot",
    source: "(102:6) <NotchedOutline         bind:this={notchedOutline}         noLabel={noLabel || (label == null && !$$slots.label)}         {...prefixFilter($$restProps, 'outline$')}       >",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let lineripple;
  let current;
  const lineripple_spread_levels = [prefixFilter(
    /*$$restProps*/
    ctx[53],
    "ripple$"
  )];
  let lineripple_props = {};
  for (let i = 0; i < lineripple_spread_levels.length; i += 1) {
    lineripple_props = assign(lineripple_props, lineripple_spread_levels[i]);
  }
  lineripple = new dist_default5({ props: lineripple_props, $$inline: true });
  ctx[70](lineripple);
  const block = {
    c: function create() {
      create_component(lineripple.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(lineripple.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(lineripple, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const lineripple_changes = dirty[1] & /*$$restProps*/
      4194304 ? get_spread_update(lineripple_spread_levels, [get_spread_object(prefixFilter(
        /*$$restProps*/
        ctx2[53],
        "ripple$"
      ))]) : {};
      lineripple.$set(lineripple_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(lineripple.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(lineripple.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[70](null);
      destroy_component(lineripple, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(170:4) {#if variant !== 'outlined' && ripple}",
    ctx
  });
  return block;
}
function create_default_slot_2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[64].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[87],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[2] & /*$$scope*/
        33554432)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[87],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[87]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[87],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_2.name,
    type: "slot",
    source: `(197:4) <List       role=\\"listbox\\"       {wrapFocus}       bind:selectedIndex       on:SMUIList:mount={(event) => (list = event.detail)}       {...prefixFilter($$restProps, 'list$')}>`,
    ctx
  });
  return block;
}
function create_default_slot_1(ctx) {
  let list_1;
  let updating_selectedIndex;
  let current;
  const list_1_spread_levels = [
    { role: "listbox" },
    { wrapFocus: (
      /*wrapFocus*/
      ctx[35]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "list$"
    )
  ];
  function list_1_selectedIndex_binding(value) {
    ctx[75](value);
  }
  let list_1_props = {
    $$slots: { default: [create_default_slot_2] },
    $$scope: { ctx }
  };
  for (let i = 0; i < list_1_spread_levels.length; i += 1) {
    list_1_props = assign(list_1_props, list_1_spread_levels[i]);
  }
  if (
    /*selectedIndex*/
    ctx[24] !== void 0
  ) {
    list_1_props.selectedIndex = /*selectedIndex*/
    ctx[24];
  }
  list_1 = new dist_default2({ props: list_1_props, $$inline: true });
  binding_callbacks.push(() => bind(list_1, "selectedIndex", list_1_selectedIndex_binding));
  list_1.$on(
    "SMUIList:mount",
    /*SMUIList_mount_handler*/
    ctx[76]
  );
  const block = {
    c: function create() {
      create_component(list_1.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(list_1.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(list_1, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const list_1_changes = dirty[1] & /*wrapFocus, $$restProps*/
      4194320 ? get_spread_update(list_1_spread_levels, [
        list_1_spread_levels[0],
        dirty[1] & /*wrapFocus*/
        16 && { wrapFocus: (
          /*wrapFocus*/
          ctx2[35]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx2[53],
          "list$"
        ))
      ]) : {};
      if (dirty[2] & /*$$scope*/
      33554432) {
        list_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_selectedIndex && dirty[0] & /*selectedIndex*/
      16777216) {
        updating_selectedIndex = true;
        list_1_changes.selectedIndex = /*selectedIndex*/
        ctx2[24];
        add_flush_callback(() => updating_selectedIndex = false);
      }
      list_1.$set(list_1_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(list_1.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(list_1.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(list_1, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: "(178:2) <Menu     class={classMap({       [menu$class]: true,       'mdc-select__menu': true,       ...menuClasses,     })}     id={menuId}     fullWidth     anchor={false}     {anchorElement}     {anchorCorner}     bind:open={menuOpen}     on:SMUIMenu:selected={(event) =>       instance && instance.handleMenuItemAction(event.detail.index)}     on:SMUIMenuSurface:closing={() => instance && instance.handleMenuClosing()}     on:SMUIMenuSurface:closed={() => instance && instance.handleMenuClosed()}     on:SMUIMenuSurface:opened={() => instance && instance.handleMenuOpened()}     {...prefixFilter($$restProps, 'menu$')}   >",
    ctx
  });
  return block;
}
function create_if_block2(ctx) {
  let helpertext;
  let current;
  const helpertext_spread_levels = [prefixFilter(
    /*$$restProps*/
    ctx[53],
    "helperText$"
  )];
  let helpertext_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  for (let i = 0; i < helpertext_spread_levels.length; i += 1) {
    helpertext_props = assign(helpertext_props, helpertext_spread_levels[i]);
  }
  helpertext = new HelperText_default({ props: helpertext_props, $$inline: true });
  helpertext.$on(
    "SMUISelectHelperText:id",
    /*SMUISelectHelperText_id_handler*/
    ctx[84]
  );
  helpertext.$on(
    "SMUISelectHelperText:mount",
    /*SMUISelectHelperText_mount_handler*/
    ctx[85]
  );
  helpertext.$on(
    "SMUISelectHelperText:unmount",
    /*SMUISelectHelperText_unmount_handler*/
    ctx[86]
  );
  const block = {
    c: function create() {
      create_component(helpertext.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(helpertext.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(helpertext, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const helpertext_changes = dirty[1] & /*$$restProps*/
      4194304 ? get_spread_update(helpertext_spread_levels, [get_spread_object(prefixFilter(
        /*$$restProps*/
        ctx2[53],
        "helperText$"
      ))]) : {};
      if (dirty[2] & /*$$scope*/
      33554432) {
        helpertext_changes.$$scope = { dirty, ctx: ctx2 };
      }
      helpertext.$set(helpertext_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(helpertext.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(helpertext.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(helpertext, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(206:0) {#if $$slots.helperText}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let current;
  const helperText_slot_template = (
    /*#slots*/
    ctx[64].helperText
  );
  const helperText_slot = create_slot(
    helperText_slot_template,
    ctx,
    /*$$scope*/
    ctx[87],
    get_helperText_slot_context
  );
  const block = {
    c: function create() {
      if (helperText_slot)
        helperText_slot.c();
    },
    l: function claim(nodes) {
      if (helperText_slot)
        helperText_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (helperText_slot) {
        helperText_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (helperText_slot) {
        if (helperText_slot.p && (!current || dirty[2] & /*$$scope*/
        33554432)) {
          update_slot_base(
            helperText_slot,
            helperText_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[87],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[87]
            ) : get_slot_changes(
              helperText_slot_template,
              /*$$scope*/
              ctx2[87],
              dirty,
              get_helperText_slot_changes
            ),
            get_helperText_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(helperText_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(helperText_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (helperText_slot)
        helperText_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(207:2) <HelperText     on:SMUISelectHelperText:id={(event) => (helperId = event.detail)}     on:SMUISelectHelperText:mount={(event) => (helperText = event.detail)}     on:SMUISelectHelperText:unmount={() => {       helperId = undefined;       helperText = undefined;     }}     {...prefixFilter($$restProps, 'helperText$')}     >",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let div1;
  let t0;
  let div0;
  let t1;
  let t2;
  let t3;
  let t4;
  let span1;
  let span0;
  let t5;
  let span0_id_value;
  let span0_class_value;
  let span0_aria_labelledby_value;
  let useActions_action;
  let span1_class_value;
  let useActions_action_1;
  let t6;
  let span2;
  let svg;
  let polygon0;
  let polygon1;
  let span2_class_value;
  let useActions_action_2;
  let t7;
  let div0_class_value;
  let div0_aria_required_value;
  let div0_aria_disabled_value;
  let div0_aria_expanded_value;
  let useActions_action_3;
  let t8;
  let menu;
  let updating_open;
  let div1_class_value;
  let div1_style_value;
  let Ripple_action;
  let Anchor_action;
  let useActions_action_4;
  let forwardEvents_action;
  let t9;
  let if_block5_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*hiddenInput*/
    ctx[12] && create_if_block_6(ctx)
  );
  let if_block1 = (
    /*variant*/
    ctx[7] === "filled" && create_if_block_5(ctx)
  );
  let if_block2 = (
    /*variant*/
    ctx[7] !== "outlined" && !/*noLabel*/
    ctx[8] && /*label*/
    (ctx[9] != null || /*$$slots*/
    ctx[54].label) && create_if_block_4(ctx)
  );
  let if_block3 = (
    /*variant*/
    ctx[7] === "outlined" && create_if_block_2(ctx)
  );
  const leadingIcon_slot_template = (
    /*#slots*/
    ctx[64].leadingIcon
  );
  const leadingIcon_slot = create_slot(
    leadingIcon_slot_template,
    ctx,
    /*$$scope*/
    ctx[87],
    get_leadingIcon_slot_context
  );
  let span0_levels = [
    {
      id: span0_id_value = /*inputId*/
      ctx[11] + "-smui-selected-text"
    },
    {
      class: span0_class_value = classMap({
        [
          /*selectedText$class*/
          ctx[19]
        ]: true,
        "mdc-select__selected-text": true
      })
    },
    { role: "button" },
    { "aria-haspopup": "listbox" },
    {
      "aria-labelledby": span0_aria_labelledby_value = /*inputId*/
      ctx[11] + "-smui-label"
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "selectedText$"
    )
  ];
  let span_data_1 = {};
  for (let i = 0; i < span0_levels.length; i += 1) {
    span_data_1 = assign(span_data_1, span0_levels[i]);
  }
  let span1_levels = [
    {
      class: span1_class_value = classMap({
        [
          /*selectedTextContainer$class*/
          ctx[17]
        ]: true,
        "mdc-select__selected-text-container": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "selectedTextContainer$"
    )
  ];
  let span_data_2 = {};
  for (let i = 0; i < span1_levels.length; i += 1) {
    span_data_2 = assign(span_data_2, span1_levels[i]);
  }
  let span2_levels = [
    {
      class: span2_class_value = classMap({
        [
          /*dropdownIcon$class*/
          ctx[21]
        ]: true,
        "mdc-select__dropdown-icon": true
      })
    },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "dropdownIcon$"
    )
  ];
  let span_data = {};
  for (let i = 0; i < span2_levels.length; i += 1) {
    span_data = assign(span_data, span2_levels[i]);
  }
  let if_block4 = (
    /*variant*/
    ctx[7] !== "outlined" && /*ripple*/
    ctx[5] && create_if_block_1(ctx)
  );
  let div0_levels = [
    {
      class: div0_class_value = classMap({
        [
          /*anchor$class*/
          ctx[15]
        ]: true,
        "mdc-select__anchor": true
      })
    },
    {
      "aria-required": div0_aria_required_value = /*required*/
      ctx[10] ? "true" : void 0
    },
    {
      "aria-disabled": div0_aria_disabled_value = /*disabled*/
      ctx[6] ? "true" : void 0
    },
    { "aria-controls": (
      /*menuId*/
      ctx[45]
    ) },
    {
      "aria-expanded": div0_aria_expanded_value = /*menuOpen*/
      ctx[31] ? "true" : "false"
    },
    { "aria-describedby": (
      /*helperId*/
      ctx[30]
    ) },
    { role: "combobox" },
    { tabindex: "0" },
    /*selectAnchorAttrs*/
    ctx[29],
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "anchor$"
    )
  ];
  let div_data = {};
  for (let i = 0; i < div0_levels.length; i += 1) {
    div_data = assign(div_data, div0_levels[i]);
  }
  const menu_spread_levels = [
    {
      class: classMap({
        [
          /*menu$class*/
          ctx[22]
        ]: true,
        "mdc-select__menu": true,
        .../*menuClasses*/
        ctx[32]
      })
    },
    { id: (
      /*menuId*/
      ctx[45]
    ) },
    { fullWidth: true },
    { anchor: false },
    { anchorElement: (
      /*anchorElement*/
      ctx[33]
    ) },
    { anchorCorner: (
      /*anchorCorner*/
      ctx[34]
    ) },
    prefixFilter(
      /*$$restProps*/
      ctx[53],
      "menu$"
    )
  ];
  function menu_open_binding(value) {
    ctx[77](value);
  }
  let menu_props = {
    $$slots: { default: [create_default_slot_1] },
    $$scope: { ctx }
  };
  for (let i = 0; i < menu_spread_levels.length; i += 1) {
    menu_props = assign(menu_props, menu_spread_levels[i]);
  }
  if (
    /*menuOpen*/
    ctx[31] !== void 0
  ) {
    menu_props.open = /*menuOpen*/
    ctx[31];
  }
  menu = new dist_default3({ props: menu_props, $$inline: true });
  binding_callbacks.push(() => bind(menu, "open", menu_open_binding));
  menu.$on(
    "SMUIMenu:selected",
    /*SMUIMenu_selected_handler*/
    ctx[78]
  );
  menu.$on(
    "SMUIMenuSurface:closing",
    /*SMUIMenuSurface_closing_handler*/
    ctx[79]
  );
  menu.$on(
    "SMUIMenuSurface:closed",
    /*SMUIMenuSurface_closed_handler*/
    ctx[80]
  );
  menu.$on(
    "SMUIMenuSurface:opened",
    /*SMUIMenuSurface_opened_handler*/
    ctx[81]
  );
  let div1_levels = [
    {
      class: div1_class_value = classMap({
        [
          /*className*/
          ctx[3]
        ]: true,
        "mdc-select": true,
        "mdc-select--required": (
          /*required*/
          ctx[10]
        ),
        "mdc-select--disabled": (
          /*disabled*/
          ctx[6]
        ),
        "mdc-select--filled": (
          /*variant*/
          ctx[7] === "filled"
        ),
        "mdc-select--outlined": (
          /*variant*/
          ctx[7] === "outlined"
        ),
        "smui-select--standard": (
          /*variant*/
          ctx[7] === "standard"
        ),
        "mdc-select--with-leading-icon": (
          /*isUninitializedValue*/
          ctx[44](
            /*withLeadingIcon*/
            ctx[13]
          ) ? (
            /*$$slots*/
            ctx[54].leadingIcon
          ) : (
            /*withLeadingIcon*/
            ctx[13]
          )
        ),
        "mdc-select--no-label": (
          /*noLabel*/
          ctx[8] || /*label*/
          ctx[9] == null && !/*$$slots*/
          ctx[54].label
        ),
        "mdc-select--invalid": (
          /*invalid*/
          ctx[1]
        ),
        "mdc-select--activated": (
          /*menuOpen*/
          ctx[31]
        ),
        "mdc-data-table__pagination-rows-per-page-select": (
          /*context*/
          ctx[46] === "data-table:pagination"
        ),
        .../*internalClasses*/
        ctx[26]
      })
    },
    {
      style: div1_style_value = Object.entries(
        /*internalStyles*/
        ctx[27]
      ).map(func).concat([
        /*style*/
        ctx[4]
      ]).join(" ")
    },
    exclude(
      /*$$restProps*/
      ctx[53],
      [
        "input$",
        "anchor$",
        "label$",
        "outline$",
        "selectedTextContainer$",
        "selectedText$",
        "dropdownIcon$",
        "ripple$",
        "menu$",
        "list$",
        "helperText$"
      ]
    )
  ];
  let div_data_1 = {};
  for (let i = 0; i < div1_levels.length; i += 1) {
    div_data_1 = assign(div_data_1, div1_levels[i]);
  }
  let if_block5 = (
    /*$$slots*/
    ctx[54].helperText && create_if_block2(ctx)
  );
  const block = {
    c: function create() {
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      t3 = space();
      if (leadingIcon_slot)
        leadingIcon_slot.c();
      t4 = space();
      span1 = element("span");
      span0 = element("span");
      t5 = text(
        /*$selectedTextStore*/
        ctx[42]
      );
      t6 = space();
      span2 = element("span");
      svg = svg_element("svg");
      polygon0 = svg_element("polygon");
      polygon1 = svg_element("polygon");
      t7 = space();
      if (if_block4)
        if_block4.c();
      t8 = space();
      create_component(menu.$$.fragment);
      t9 = space();
      if (if_block5)
        if_block5.c();
      if_block5_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, style: true });
      var div1_nodes = children(div1);
      if (if_block0)
        if_block0.l(div1_nodes);
      t0 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", {
        class: true,
        "aria-required": true,
        "aria-disabled": true,
        "aria-controls": true,
        "aria-expanded": true,
        "aria-describedby": true,
        role: true,
        tabindex: true
      });
      var div0_nodes = children(div0);
      if (if_block1)
        if_block1.l(div0_nodes);
      t1 = claim_space(div0_nodes);
      if (if_block2)
        if_block2.l(div0_nodes);
      t2 = claim_space(div0_nodes);
      if (if_block3)
        if_block3.l(div0_nodes);
      t3 = claim_space(div0_nodes);
      if (leadingIcon_slot)
        leadingIcon_slot.l(div0_nodes);
      t4 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      span0 = claim_element(span1_nodes, "SPAN", {
        id: true,
        class: true,
        role: true,
        "aria-haspopup": true,
        "aria-labelledby": true
      });
      var span0_nodes = children(span0);
      t5 = claim_text(
        span0_nodes,
        /*$selectedTextStore*/
        ctx[42]
      );
      span0_nodes.forEach(detach_dev);
      span1_nodes.forEach(detach_dev);
      t6 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      svg = claim_svg_element(span2_nodes, "svg", {
        class: true,
        viewBox: true,
        focusable: true
      });
      var svg_nodes = children(svg);
      polygon0 = claim_svg_element(svg_nodes, "polygon", {
        class: true,
        stroke: true,
        "fill-rule": true,
        points: true
      });
      children(polygon0).forEach(detach_dev);
      polygon1 = claim_svg_element(svg_nodes, "polygon", {
        class: true,
        stroke: true,
        "fill-rule": true,
        points: true
      });
      children(polygon1).forEach(detach_dev);
      svg_nodes.forEach(detach_dev);
      span2_nodes.forEach(detach_dev);
      t7 = claim_space(div0_nodes);
      if (if_block4)
        if_block4.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      t8 = claim_space(div1_nodes);
      claim_component(menu.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach_dev);
      t9 = claim_space(nodes);
      if (if_block5)
        if_block5.l(nodes);
      if_block5_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      set_attributes(span0, span_data_1);
      add_location(span0, file2, 127, 6, 3816);
      set_attributes(span1, span_data_2);
      add_location(span1, file2, 119, 4, 3554);
      attr_dev(polygon0, "class", "mdc-select__dropdown-icon-inactive");
      attr_dev(polygon0, "stroke", "none");
      attr_dev(polygon0, "fill-rule", "evenodd");
      attr_dev(polygon0, "points", "7 10 12 15 17 10");
      add_location(polygon0, file2, 155, 8, 4607);
      attr_dev(polygon1, "class", "mdc-select__dropdown-icon-active");
      attr_dev(polygon1, "stroke", "none");
      attr_dev(polygon1, "fill-rule", "evenodd");
      attr_dev(polygon1, "points", "7 15 12 10 17 15");
      add_location(polygon1, file2, 161, 8, 4778);
      attr_dev(svg, "class", "mdc-select__dropdown-icon-graphic");
      attr_dev(svg, "viewBox", "7 10 10 5");
      attr_dev(svg, "focusable", "false");
      add_location(svg, file2, 150, 6, 4482);
      set_attributes(span2, span_data);
      add_location(span2, file2, 142, 4, 4257);
      set_attributes(div0, div_data);
      add_location(div0, file2, 59, 2, 1579);
      set_attributes(div1, div_data_1);
      add_location(div1, file2, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      if (if_block0)
        if_block0.m(div1, null);
      append_hydration_dev(div1, t0);
      append_hydration_dev(div1, div0);
      if (if_block1)
        if_block1.m(div0, null);
      append_hydration_dev(div0, t1);
      if (if_block2)
        if_block2.m(div0, null);
      append_hydration_dev(div0, t2);
      if (if_block3)
        if_block3.m(div0, null);
      append_hydration_dev(div0, t3);
      if (leadingIcon_slot) {
        leadingIcon_slot.m(div0, null);
      }
      append_hydration_dev(div0, t4);
      append_hydration_dev(div0, span1);
      append_hydration_dev(span1, span0);
      append_hydration_dev(span0, t5);
      append_hydration_dev(div0, t6);
      append_hydration_dev(div0, span2);
      append_hydration_dev(span2, svg);
      append_hydration_dev(svg, polygon0);
      append_hydration_dev(svg, polygon1);
      append_hydration_dev(div0, t7);
      if (if_block4)
        if_block4.m(div0, null);
      ctx[71](div0);
      append_hydration_dev(div1, t8);
      mount_component(menu, div1, null);
      ctx[82](div1);
      insert_hydration_dev(target, t9, anchor);
      if (if_block5)
        if_block5.m(target, anchor);
      insert_hydration_dev(target, if_block5_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            span0,
            /*selectedText$use*/
            ctx[18]
          )),
          action_destroyer(useActions_action_1 = useActions.call(
            null,
            span1,
            /*selectedTextContainer$use*/
            ctx[16]
          )),
          action_destroyer(useActions_action_2 = useActions.call(
            null,
            span2,
            /*dropdownIcon$use*/
            ctx[20]
          )),
          action_destroyer(useActions_action_3 = useActions.call(
            null,
            div0,
            /*anchor$use*/
            ctx[14]
          )),
          listen_dev(
            div0,
            "focus",
            /*focus_handler_1*/
            ctx[72],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div0,
            "blur",
            /*blur_handler_1*/
            ctx[73],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div0,
            "click",
            /*click_handler*/
            ctx[74],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div0,
            "keydown",
            function() {
              if (is_function(
                /*instance*/
                ctx[23] && /*instance*/
                ctx[23].handleKeydown.bind(
                  /*instance*/
                  ctx[23]
                )
              ))
                /*instance*/
                (ctx[23] && /*instance*/
                ctx[23].handleKeydown.bind(
                  /*instance*/
                  ctx[23]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div0,
            "focus",
            /*focus_handler*/
            ctx[65],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div0,
            "blur",
            /*blur_handler*/
            ctx[66],
            false,
            false,
            false,
            false
          ),
          action_destroyer(Ripple_action = dist_default.call(null, div1, {
            ripple: (
              /*variant*/
              ctx[7] === "filled"
            ),
            unbounded: false,
            addClass: (
              /*addClass*/
              ctx[50]
            ),
            removeClass: (
              /*removeClass*/
              ctx[51]
            ),
            addStyle: (
              /*addStyle*/
              ctx[52]
            )
          })),
          action_destroyer(Anchor_action = Anchor.call(null, div1, {
            addClass: (
              /*addClass*/
              ctx[50]
            ),
            removeClass: (
              /*removeClass*/
              ctx[51]
            )
          })),
          action_destroyer(useActions_action_4 = useActions.call(
            null,
            div1,
            /*use*/
            ctx[2]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[43].call(null, div1)),
          listen_dev(
            div1,
            "SMUISelectLeadingIcon:mount",
            /*handleLeadingIconMount*/
            ctx[49],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div1,
            "SMUISelectLeadingIcon:unmount",
            /*SMUISelectLeadingIcon_unmount_handler*/
            ctx[83],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (
        /*hiddenInput*/
        ctx[12]
      ) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
        } else {
          if_block0 = create_if_block_6(ctx);
          if_block0.c();
          if_block0.m(div1, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*variant*/
        ctx[7] === "filled"
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_5(ctx);
          if_block1.c();
          if_block1.m(div0, t1);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (
        /*variant*/
        ctx[7] !== "outlined" && !/*noLabel*/
        ctx[8] && /*label*/
        (ctx[9] != null || /*$$slots*/
        ctx[54].label)
      ) {
        if (if_block2) {
          if_block2.p(ctx, dirty);
          if (dirty[0] & /*variant, noLabel, label*/
          896 | dirty[1] & /*$$slots*/
          8388608) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_4(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div0, t2);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*variant*/
        ctx[7] === "outlined"
      ) {
        if (if_block3) {
          if_block3.p(ctx, dirty);
          if (dirty[0] & /*variant*/
          128) {
            transition_in(if_block3, 1);
          }
        } else {
          if_block3 = create_if_block_2(ctx);
          if_block3.c();
          transition_in(if_block3, 1);
          if_block3.m(div0, t3);
        }
      } else if (if_block3) {
        group_outros();
        transition_out(if_block3, 1, 1, () => {
          if_block3 = null;
        });
        check_outros();
      }
      if (leadingIcon_slot) {
        if (leadingIcon_slot.p && (!current || dirty[2] & /*$$scope*/
        33554432)) {
          update_slot_base(
            leadingIcon_slot,
            leadingIcon_slot_template,
            ctx,
            /*$$scope*/
            ctx[87],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[87]
            ) : get_slot_changes(
              leadingIcon_slot_template,
              /*$$scope*/
              ctx[87],
              dirty,
              get_leadingIcon_slot_changes
            ),
            get_leadingIcon_slot_context
          );
        }
      }
      if (!current || dirty[1] & /*$selectedTextStore*/
      2048)
        set_data_maybe_contenteditable_dev(
          t5,
          /*$selectedTextStore*/
          ctx[42],
          span_data_1["contenteditable"]
        );
      set_attributes(span0, span_data_1 = get_spread_update(span0_levels, [
        (!current || dirty[0] & /*inputId*/
        2048 && span0_id_value !== (span0_id_value = /*inputId*/
        ctx[11] + "-smui-selected-text")) && { id: span0_id_value },
        (!current || dirty[0] & /*selectedText$class*/
        524288 && span0_class_value !== (span0_class_value = classMap({
          [
            /*selectedText$class*/
            ctx[19]
          ]: true,
          "mdc-select__selected-text": true
        }))) && { class: span0_class_value },
        { role: "button" },
        { "aria-haspopup": "listbox" },
        (!current || dirty[0] & /*inputId*/
        2048 && span0_aria_labelledby_value !== (span0_aria_labelledby_value = /*inputId*/
        ctx[11] + "-smui-label")) && {
          "aria-labelledby": span0_aria_labelledby_value
        },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "selectedText$"
        )
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*selectedText$use*/
      262144)
        useActions_action.update.call(
          null,
          /*selectedText$use*/
          ctx[18]
        );
      set_attributes(span1, span_data_2 = get_spread_update(span1_levels, [
        (!current || dirty[0] & /*selectedTextContainer$class*/
        131072 && span1_class_value !== (span1_class_value = classMap({
          [
            /*selectedTextContainer$class*/
            ctx[17]
          ]: true,
          "mdc-select__selected-text-container": true
        }))) && { class: span1_class_value },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "selectedTextContainer$"
        )
      ]));
      if (useActions_action_1 && is_function(useActions_action_1.update) && dirty[0] & /*selectedTextContainer$use*/
      65536)
        useActions_action_1.update.call(
          null,
          /*selectedTextContainer$use*/
          ctx[16]
        );
      set_attributes(span2, span_data = get_spread_update(span2_levels, [
        (!current || dirty[0] & /*dropdownIcon$class*/
        2097152 && span2_class_value !== (span2_class_value = classMap({
          [
            /*dropdownIcon$class*/
            ctx[21]
          ]: true,
          "mdc-select__dropdown-icon": true
        }))) && { class: span2_class_value },
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "dropdownIcon$"
        )
      ]));
      if (useActions_action_2 && is_function(useActions_action_2.update) && dirty[0] & /*dropdownIcon$use*/
      1048576)
        useActions_action_2.update.call(
          null,
          /*dropdownIcon$use*/
          ctx[20]
        );
      if (
        /*variant*/
        ctx[7] !== "outlined" && /*ripple*/
        ctx[5]
      ) {
        if (if_block4) {
          if_block4.p(ctx, dirty);
          if (dirty[0] & /*variant, ripple*/
          160) {
            transition_in(if_block4, 1);
          }
        } else {
          if_block4 = create_if_block_1(ctx);
          if_block4.c();
          transition_in(if_block4, 1);
          if_block4.m(div0, null);
        }
      } else if (if_block4) {
        group_outros();
        transition_out(if_block4, 1, 1, () => {
          if_block4 = null;
        });
        check_outros();
      }
      set_attributes(div0, div_data = get_spread_update(div0_levels, [
        (!current || dirty[0] & /*anchor$class*/
        32768 && div0_class_value !== (div0_class_value = classMap({
          [
            /*anchor$class*/
            ctx[15]
          ]: true,
          "mdc-select__anchor": true
        }))) && { class: div0_class_value },
        (!current || dirty[0] & /*required*/
        1024 && div0_aria_required_value !== (div0_aria_required_value = /*required*/
        ctx[10] ? "true" : void 0)) && {
          "aria-required": div0_aria_required_value
        },
        (!current || dirty[0] & /*disabled*/
        64 && div0_aria_disabled_value !== (div0_aria_disabled_value = /*disabled*/
        ctx[6] ? "true" : void 0)) && {
          "aria-disabled": div0_aria_disabled_value
        },
        { "aria-controls": (
          /*menuId*/
          ctx[45]
        ) },
        (!current || dirty[1] & /*menuOpen*/
        1 && div0_aria_expanded_value !== (div0_aria_expanded_value = /*menuOpen*/
        ctx[31] ? "true" : "false")) && {
          "aria-expanded": div0_aria_expanded_value
        },
        (!current || dirty[0] & /*helperId*/
        1073741824) && { "aria-describedby": (
          /*helperId*/
          ctx[30]
        ) },
        { role: "combobox" },
        { tabindex: "0" },
        dirty[0] & /*selectAnchorAttrs*/
        536870912 && /*selectAnchorAttrs*/
        ctx[29],
        dirty[1] & /*$$restProps*/
        4194304 && prefixFilter(
          /*$$restProps*/
          ctx[53],
          "anchor$"
        )
      ]));
      if (useActions_action_3 && is_function(useActions_action_3.update) && dirty[0] & /*anchor$use*/
      16384)
        useActions_action_3.update.call(
          null,
          /*anchor$use*/
          ctx[14]
        );
      const menu_changes = dirty[0] & /*menu$class*/
      4194304 | dirty[1] & /*menuClasses, menuId, anchorElement, anchorCorner, $$restProps*/
      4210702 ? get_spread_update(menu_spread_levels, [
        dirty[0] & /*menu$class*/
        4194304 | dirty[1] & /*menuClasses*/
        2 && {
          class: classMap({
            [
              /*menu$class*/
              ctx[22]
            ]: true,
            "mdc-select__menu": true,
            .../*menuClasses*/
            ctx[32]
          })
        },
        dirty[1] & /*menuId*/
        16384 && { id: (
          /*menuId*/
          ctx[45]
        ) },
        menu_spread_levels[2],
        menu_spread_levels[3],
        dirty[1] & /*anchorElement*/
        4 && { anchorElement: (
          /*anchorElement*/
          ctx[33]
        ) },
        dirty[1] & /*anchorCorner*/
        8 && { anchorCorner: (
          /*anchorCorner*/
          ctx[34]
        ) },
        dirty[1] & /*$$restProps*/
        4194304 && get_spread_object(prefixFilter(
          /*$$restProps*/
          ctx[53],
          "menu$"
        ))
      ]) : {};
      if (dirty[0] & /*selectedIndex*/
      16777216 | dirty[1] & /*wrapFocus, $$restProps, list*/
      4194352 | dirty[2] & /*$$scope*/
      33554432) {
        menu_changes.$$scope = { dirty, ctx };
      }
      if (!updating_open && dirty[1] & /*menuOpen*/
      1) {
        updating_open = true;
        menu_changes.open = /*menuOpen*/
        ctx[31];
        add_flush_callback(() => updating_open = false);
      }
      menu.$set(menu_changes);
      set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [
        (!current || dirty[0] & /*className, required, disabled, variant, withLeadingIcon, noLabel, label, invalid, internalClasses*/
        67119050 | dirty[1] & /*$$slots, menuOpen*/
        8388609 && div1_class_value !== (div1_class_value = classMap({
          [
            /*className*/
            ctx[3]
          ]: true,
          "mdc-select": true,
          "mdc-select--required": (
            /*required*/
            ctx[10]
          ),
          "mdc-select--disabled": (
            /*disabled*/
            ctx[6]
          ),
          "mdc-select--filled": (
            /*variant*/
            ctx[7] === "filled"
          ),
          "mdc-select--outlined": (
            /*variant*/
            ctx[7] === "outlined"
          ),
          "smui-select--standard": (
            /*variant*/
            ctx[7] === "standard"
          ),
          "mdc-select--with-leading-icon": (
            /*isUninitializedValue*/
            ctx[44](
              /*withLeadingIcon*/
              ctx[13]
            ) ? (
              /*$$slots*/
              ctx[54].leadingIcon
            ) : (
              /*withLeadingIcon*/
              ctx[13]
            )
          ),
          "mdc-select--no-label": (
            /*noLabel*/
            ctx[8] || /*label*/
            ctx[9] == null && !/*$$slots*/
            ctx[54].label
          ),
          "mdc-select--invalid": (
            /*invalid*/
            ctx[1]
          ),
          "mdc-select--activated": (
            /*menuOpen*/
            ctx[31]
          ),
          "mdc-data-table__pagination-rows-per-page-select": (
            /*context*/
            ctx[46] === "data-table:pagination"
          ),
          .../*internalClasses*/
          ctx[26]
        }))) && { class: div1_class_value },
        (!current || dirty[0] & /*internalStyles, style*/
        134217744 && div1_style_value !== (div1_style_value = Object.entries(
          /*internalStyles*/
          ctx[27]
        ).map(func).concat([
          /*style*/
          ctx[4]
        ]).join(" "))) && { style: div1_style_value },
        dirty[1] & /*$$restProps*/
        4194304 && exclude(
          /*$$restProps*/
          ctx[53],
          [
            "input$",
            "anchor$",
            "label$",
            "outline$",
            "selectedTextContainer$",
            "selectedText$",
            "dropdownIcon$",
            "ripple$",
            "menu$",
            "list$",
            "helperText$"
          ]
        )
      ]));
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*variant*/
      128)
        Ripple_action.update.call(null, {
          ripple: (
            /*variant*/
            ctx[7] === "filled"
          ),
          unbounded: false,
          addClass: (
            /*addClass*/
            ctx[50]
          ),
          removeClass: (
            /*removeClass*/
            ctx[51]
          ),
          addStyle: (
            /*addStyle*/
            ctx[52]
          )
        });
      if (useActions_action_4 && is_function(useActions_action_4.update) && dirty[0] & /*use*/
      4)
        useActions_action_4.update.call(
          null,
          /*use*/
          ctx[2]
        );
      if (
        /*$$slots*/
        ctx[54].helperText
      ) {
        if (if_block5) {
          if_block5.p(ctx, dirty);
          if (dirty[1] & /*$$slots*/
          8388608) {
            transition_in(if_block5, 1);
          }
        } else {
          if_block5 = create_if_block2(ctx);
          if_block5.c();
          transition_in(if_block5, 1);
          if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
        }
      } else if (if_block5) {
        group_outros();
        transition_out(if_block5, 1, 1, () => {
          if_block5 = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block2);
      transition_in(if_block3);
      transition_in(leadingIcon_slot, local);
      transition_in(if_block4);
      transition_in(menu.$$.fragment, local);
      transition_in(if_block5);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block2);
      transition_out(if_block3);
      transition_out(leadingIcon_slot, local);
      transition_out(if_block4);
      transition_out(menu.$$.fragment, local);
      transition_out(if_block5);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (leadingIcon_slot)
        leadingIcon_slot.d(detaching);
      if (if_block4)
        if_block4.d();
      ctx[71](null);
      destroy_component(menu);
      ctx[82](null);
      if (detaching)
        detach_dev(t9);
      if (if_block5)
        if_block5.d(detaching);
      if (detaching)
        detach_dev(if_block5_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var counter2 = 0;
function getNormalizedXCoordinate(evt) {
  const targetClientRect = evt.currentTarget.getBoundingClientRect();
  const xCoordinate = isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
  return xCoordinate - targetClientRect.left;
}
function isTouchEvent(evt) {
  return "touches" in evt;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance_12($$self, $$props, $$invalidate) {
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "disabled",
    "variant",
    "noLabel",
    "label",
    "value",
    "key",
    "dirty",
    "invalid",
    "updateInvalid",
    "required",
    "inputId",
    "hiddenInput",
    "withLeadingIcon",
    "anchor$use",
    "anchor$class",
    "selectedTextContainer$use",
    "selectedTextContainer$class",
    "selectedText$use",
    "selectedText$class",
    "dropdownIcon$use",
    "dropdownIcon$class",
    "menu$class",
    "getUseDefaultValidation",
    "setUseDefaultValidation",
    "focus",
    "layout",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $selectedTextStore;
  let $valueStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Select", slots, ["label", "leadingIcon", "default", "helperText"]);
  const $$slots = compute_slots(slots);
  var _a;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value2) {
    return value2 === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { disabled = false } = $$props;
  let { variant = "standard" } = $$props;
  let { noLabel = false } = $$props;
  let { label = void 0 } = $$props;
  let { value = "" } = $$props;
  let { key = (item) => item } = $$props;
  let { dirty = false } = $$props;
  let { invalid = uninitializedValue } = $$props;
  let { updateInvalid = isUninitializedValue(invalid) } = $$props;
  const useDefaultValidation = isUninitializedValue(invalid);
  if (isUninitializedValue(invalid)) {
    invalid = false;
  }
  let { required = false } = $$props;
  let { inputId = "SMUI-select-" + counter2++ } = $$props;
  let { hiddenInput = false } = $$props;
  let { withLeadingIcon = uninitializedValue } = $$props;
  let { anchor$use = [] } = $$props;
  let { anchor$class = "" } = $$props;
  let { selectedTextContainer$use = [] } = $$props;
  let { selectedTextContainer$class = "" } = $$props;
  let { selectedText$use = [] } = $$props;
  let { selectedText$class = "" } = $$props;
  let { dropdownIcon$use = [] } = $$props;
  let { dropdownIcon$class = "" } = $$props;
  let { menu$class = "" } = $$props;
  let element2;
  let instance2;
  let internalClasses = {};
  let internalStyles = {};
  let selectAnchor;
  let selectAnchorAttrs = {};
  let selectedIndex = -1;
  let menuId = (_a = $$restProps["menu$id"]) !== null && _a !== void 0 ? _a : inputId + "-menu";
  let helperId = void 0;
  let addLayoutListener = getContext("SMUI:addLayoutListener");
  let removeLayoutListener;
  let menuOpen = false;
  let menuClasses = {};
  let anchorElement = void 0;
  let anchorCorner = void 0;
  let wrapFocus = false;
  let list;
  let context = getContext("SMUI:select:context");
  let leadingIcon = void 0;
  let helperText = void 0;
  let floatingLabel = void 0;
  let lineRipple = void 0;
  let notchedOutline = void 0;
  setContext("SMUI:list:role", "");
  setContext("SMUI:list:nav", false);
  const selectedTextStore = writable("");
  validate_store(selectedTextStore, "selectedTextStore");
  component_subscribe($$self, selectedTextStore, (value2) => $$invalidate(42, $selectedTextStore = value2));
  setContext("SMUI:select:selectedText", selectedTextStore);
  const valueStore = writable(value);
  validate_store(valueStore, "valueStore");
  component_subscribe($$self, valueStore, (value2) => $$invalidate(90, $valueStore = value2));
  setContext("SMUI:select:value", valueStore);
  let previousSelectedIndex = selectedIndex;
  if (addLayoutListener) {
    removeLayoutListener = addLayoutListener(layout);
  }
  onMount(() => {
    $$invalidate(23, instance2 = new MDCSelectFoundation(
      {
        // getSelectAdapterMethods
        // getMenuItemAttr: (menuItem: Element, attr: string) =>
        //   menuItem.getAttribute(attr),
        setSelectedText: (text2) => {
          set_store_value(selectedTextStore, $selectedTextStore = text2, $selectedTextStore);
        },
        isSelectAnchorFocused: () => document.activeElement === selectAnchor,
        getSelectAnchorAttr,
        setSelectAnchorAttr: addSelectAnchorAttr,
        removeSelectAnchorAttr,
        addMenuClass,
        removeMenuClass,
        openMenu: () => {
          $$invalidate(31, menuOpen = true);
        },
        closeMenu: () => {
          $$invalidate(31, menuOpen = false);
        },
        getAnchorElement: () => selectAnchor,
        setMenuAnchorElement: (value2) => {
          $$invalidate(33, anchorElement = value2);
        },
        setMenuAnchorCorner: (value2) => {
          $$invalidate(34, anchorCorner = value2);
        },
        setMenuWrapFocus: (value2) => {
          $$invalidate(35, wrapFocus = value2);
        },
        getSelectedIndex: () => selectedIndex,
        setSelectedIndex: (index) => {
          $$invalidate(63, previousSelectedIndex = index);
          $$invalidate(24, selectedIndex = index);
          $$invalidate(0, value = getMenuItemValues()[selectedIndex]);
        },
        focusMenuItemAtIndex: (index) => {
          list.focusItemAtIndex(index);
        },
        getMenuItemCount: () => list.items.length,
        getMenuItemValues: () => getMenuItemValues().map(key),
        getMenuItemTextAtIndex: (index) => list.getPrimaryTextAtIndex(index),
        isTypeaheadInProgress: () => list.typeaheadInProgress,
        typeaheadMatchItem: (nextChar, startingIndex) => list.typeaheadMatchItem(nextChar, startingIndex),
        // getCommonAdapterMethods
        addClass,
        removeClass,
        hasClass,
        setRippleCenter: (normalizedX) => lineRipple && lineRipple.setRippleCenter(normalizedX),
        activateBottomLine: () => lineRipple && lineRipple.activate(),
        deactivateBottomLine: () => lineRipple && lineRipple.deactivate(),
        notifyChange: (_selectedValue) => {
          $$invalidate(55, dirty = true);
          if (updateInvalid) {
            $$invalidate(1, invalid = !instance2.isValid());
          }
          dispatch(getElement(), "SMUISelect:change", { value, index: selectedIndex }, void 0, true);
        },
        // getOutlineAdapterMethods
        hasOutline: () => !!notchedOutline,
        notchOutline: (labelWidth) => notchedOutline && notchedOutline.notch(labelWidth),
        closeOutline: () => notchedOutline && notchedOutline.closeNotch(),
        // getLabelAdapterMethods
        hasLabel: () => !!floatingLabel,
        floatLabel: (shouldFloat) => floatingLabel && floatingLabel.float(shouldFloat),
        getLabelWidth: () => floatingLabel ? floatingLabel.getWidth() : 0,
        setLabelRequired: (isRequired) => floatingLabel && floatingLabel.setRequired(isRequired)
      },
      {
        get helperText() {
          return helperText;
        },
        get leadingIcon() {
          return leadingIcon;
        }
      }
    ));
    $$invalidate(24, selectedIndex = getMenuItemValues().indexOf(value));
    instance2.init();
    setUseDefaultValidation(useDefaultValidation);
    return () => {
      instance2.destroy();
    };
  });
  onDestroy(() => {
    if (removeLayoutListener) {
      removeLayoutListener();
    }
  });
  function handleLeadingIconMount(event) {
    $$invalidate(37, leadingIcon = event.detail);
  }
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(26, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(26, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value2) {
    if (internalStyles[name] != value2) {
      if (value2 === "" || value2 == null) {
        delete internalStyles[name];
        $$invalidate(27, internalStyles);
      } else {
        $$invalidate(27, internalStyles[name] = value2, internalStyles);
      }
    }
  }
  function addMenuClass(className2) {
    if (!menuClasses[className2]) {
      $$invalidate(32, menuClasses[className2] = true, menuClasses);
    }
  }
  function removeMenuClass(className2) {
    if (!(className2 in menuClasses) || menuClasses[className2]) {
      $$invalidate(32, menuClasses[className2] = false, menuClasses);
    }
  }
  function getSelectAnchorAttr(name) {
    var _a2;
    return name in selectAnchorAttrs ? (_a2 = selectAnchorAttrs[name]) !== null && _a2 !== void 0 ? _a2 : null : getElement().getAttribute(name);
  }
  function addSelectAnchorAttr(name, value2) {
    if (selectAnchorAttrs[name] !== value2) {
      $$invalidate(29, selectAnchorAttrs[name] = value2, selectAnchorAttrs);
    }
  }
  function removeSelectAnchorAttr(name) {
    if (!(name in selectAnchorAttrs) || selectAnchorAttrs[name] != null) {
      $$invalidate(29, selectAnchorAttrs[name] = void 0, selectAnchorAttrs);
    }
  }
  function getMenuItemValues() {
    return list.getOrderedList().map((accessor) => accessor.getValue());
  }
  function getUseDefaultValidation() {
    return instance2.getUseDefaultValidation();
  }
  function setUseDefaultValidation(useDefaultValidation2) {
    instance2.setUseDefaultValidation(useDefaultValidation2);
  }
  function focus() {
    selectAnchor.focus();
  }
  function layout() {
    instance2.layout();
  }
  function getElement() {
    return element2;
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function floatinglabel_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      floatingLabel = $$value;
      $$invalidate(39, floatingLabel);
    });
  }
  function floatinglabel_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      floatingLabel = $$value;
      $$invalidate(39, floatingLabel);
    });
  }
  function notchedoutline_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      notchedOutline = $$value;
      $$invalidate(41, notchedOutline);
    });
  }
  function lineripple_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      lineRipple = $$value;
      $$invalidate(40, lineRipple);
    });
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      selectAnchor = $$value;
      $$invalidate(28, selectAnchor);
    });
  }
  const focus_handler_1 = () => instance2 && instance2.handleFocus();
  const blur_handler_1 = () => instance2 && instance2.handleBlur();
  const click_handler = (event) => {
    selectAnchor.focus();
    if (instance2) {
      instance2.handleClick(getNormalizedXCoordinate(event));
    }
  };
  function list_1_selectedIndex_binding(value2) {
    selectedIndex = value2;
    $$invalidate(24, selectedIndex);
  }
  const SMUIList_mount_handler = (event) => $$invalidate(36, list = event.detail);
  function menu_open_binding(value2) {
    menuOpen = value2;
    $$invalidate(31, menuOpen);
  }
  const SMUIMenu_selected_handler = (event) => instance2 && instance2.handleMenuItemAction(event.detail.index);
  const SMUIMenuSurface_closing_handler = () => instance2 && instance2.handleMenuClosing();
  const SMUIMenuSurface_closed_handler = () => instance2 && instance2.handleMenuClosed();
  const SMUIMenuSurface_opened_handler = () => instance2 && instance2.handleMenuOpened();
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(25, element2);
    });
  }
  const SMUISelectLeadingIcon_unmount_handler = () => $$invalidate(37, leadingIcon = void 0);
  const SMUISelectHelperText_id_handler = (event) => $$invalidate(30, helperId = event.detail);
  const SMUISelectHelperText_mount_handler = (event) => $$invalidate(38, helperText = event.detail);
  const SMUISelectHelperText_unmount_handler = () => {
    $$invalidate(30, helperId = void 0);
    $$invalidate(38, helperText = void 0);
  };
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(53, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(2, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(3, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(4, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(5, ripple = $$new_props.ripple);
    if ("disabled" in $$new_props)
      $$invalidate(6, disabled = $$new_props.disabled);
    if ("variant" in $$new_props)
      $$invalidate(7, variant = $$new_props.variant);
    if ("noLabel" in $$new_props)
      $$invalidate(8, noLabel = $$new_props.noLabel);
    if ("label" in $$new_props)
      $$invalidate(9, label = $$new_props.label);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("key" in $$new_props)
      $$invalidate(56, key = $$new_props.key);
    if ("dirty" in $$new_props)
      $$invalidate(55, dirty = $$new_props.dirty);
    if ("invalid" in $$new_props)
      $$invalidate(1, invalid = $$new_props.invalid);
    if ("updateInvalid" in $$new_props)
      $$invalidate(57, updateInvalid = $$new_props.updateInvalid);
    if ("required" in $$new_props)
      $$invalidate(10, required = $$new_props.required);
    if ("inputId" in $$new_props)
      $$invalidate(11, inputId = $$new_props.inputId);
    if ("hiddenInput" in $$new_props)
      $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
    if ("withLeadingIcon" in $$new_props)
      $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
    if ("anchor$use" in $$new_props)
      $$invalidate(14, anchor$use = $$new_props.anchor$use);
    if ("anchor$class" in $$new_props)
      $$invalidate(15, anchor$class = $$new_props.anchor$class);
    if ("selectedTextContainer$use" in $$new_props)
      $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
    if ("selectedTextContainer$class" in $$new_props)
      $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
    if ("selectedText$use" in $$new_props)
      $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
    if ("selectedText$class" in $$new_props)
      $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
    if ("dropdownIcon$use" in $$new_props)
      $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
    if ("dropdownIcon$class" in $$new_props)
      $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
    if ("menu$class" in $$new_props)
      $$invalidate(22, menu$class = $$new_props.menu$class);
    if ("$$scope" in $$new_props)
      $$invalidate(87, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    counter: counter2,
    _a,
    MDCSelectFoundation,
    onMount,
    onDestroy,
    getContext,
    setContext,
    writable,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    exclude,
    prefixFilter,
    useActions,
    dispatch,
    Ripple: dist_default,
    Anchor,
    Menu: dist_default3,
    List: dist_default2,
    FloatingLabel: dist_default4,
    LineRipple: dist_default5,
    NotchedOutline: dist_default6,
    HelperText: HelperText_default,
    forwardEvents,
    uninitializedValue,
    isUninitializedValue,
    use,
    className,
    style,
    ripple,
    disabled,
    variant,
    noLabel,
    label,
    value,
    key,
    dirty,
    invalid,
    updateInvalid,
    useDefaultValidation,
    required,
    inputId,
    hiddenInput,
    withLeadingIcon,
    anchor$use,
    anchor$class,
    selectedTextContainer$use,
    selectedTextContainer$class,
    selectedText$use,
    selectedText$class,
    dropdownIcon$use,
    dropdownIcon$class,
    menu$class,
    element: element2,
    instance: instance2,
    internalClasses,
    internalStyles,
    selectAnchor,
    selectAnchorAttrs,
    selectedIndex,
    menuId,
    helperId,
    addLayoutListener,
    removeLayoutListener,
    menuOpen,
    menuClasses,
    anchorElement,
    anchorCorner,
    wrapFocus,
    list,
    context,
    leadingIcon,
    helperText,
    floatingLabel,
    lineRipple,
    notchedOutline,
    selectedTextStore,
    valueStore,
    previousSelectedIndex,
    handleLeadingIconMount,
    hasClass,
    addClass,
    removeClass,
    addStyle,
    addMenuClass,
    removeMenuClass,
    getSelectAnchorAttr,
    addSelectAnchorAttr,
    removeSelectAnchorAttr,
    getMenuItemValues,
    getNormalizedXCoordinate,
    isTouchEvent,
    getUseDefaultValidation,
    setUseDefaultValidation,
    focus,
    layout,
    getElement,
    $selectedTextStore,
    $valueStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("_a" in $$props)
      _a = $$new_props._a;
    if ("uninitializedValue" in $$props)
      uninitializedValue = $$new_props.uninitializedValue;
    if ("use" in $$props)
      $$invalidate(2, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(3, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(4, style = $$new_props.style);
    if ("ripple" in $$props)
      $$invalidate(5, ripple = $$new_props.ripple);
    if ("disabled" in $$props)
      $$invalidate(6, disabled = $$new_props.disabled);
    if ("variant" in $$props)
      $$invalidate(7, variant = $$new_props.variant);
    if ("noLabel" in $$props)
      $$invalidate(8, noLabel = $$new_props.noLabel);
    if ("label" in $$props)
      $$invalidate(9, label = $$new_props.label);
    if ("value" in $$props)
      $$invalidate(0, value = $$new_props.value);
    if ("key" in $$props)
      $$invalidate(56, key = $$new_props.key);
    if ("dirty" in $$props)
      $$invalidate(55, dirty = $$new_props.dirty);
    if ("invalid" in $$props)
      $$invalidate(1, invalid = $$new_props.invalid);
    if ("updateInvalid" in $$props)
      $$invalidate(57, updateInvalid = $$new_props.updateInvalid);
    if ("required" in $$props)
      $$invalidate(10, required = $$new_props.required);
    if ("inputId" in $$props)
      $$invalidate(11, inputId = $$new_props.inputId);
    if ("hiddenInput" in $$props)
      $$invalidate(12, hiddenInput = $$new_props.hiddenInput);
    if ("withLeadingIcon" in $$props)
      $$invalidate(13, withLeadingIcon = $$new_props.withLeadingIcon);
    if ("anchor$use" in $$props)
      $$invalidate(14, anchor$use = $$new_props.anchor$use);
    if ("anchor$class" in $$props)
      $$invalidate(15, anchor$class = $$new_props.anchor$class);
    if ("selectedTextContainer$use" in $$props)
      $$invalidate(16, selectedTextContainer$use = $$new_props.selectedTextContainer$use);
    if ("selectedTextContainer$class" in $$props)
      $$invalidate(17, selectedTextContainer$class = $$new_props.selectedTextContainer$class);
    if ("selectedText$use" in $$props)
      $$invalidate(18, selectedText$use = $$new_props.selectedText$use);
    if ("selectedText$class" in $$props)
      $$invalidate(19, selectedText$class = $$new_props.selectedText$class);
    if ("dropdownIcon$use" in $$props)
      $$invalidate(20, dropdownIcon$use = $$new_props.dropdownIcon$use);
    if ("dropdownIcon$class" in $$props)
      $$invalidate(21, dropdownIcon$class = $$new_props.dropdownIcon$class);
    if ("menu$class" in $$props)
      $$invalidate(22, menu$class = $$new_props.menu$class);
    if ("element" in $$props)
      $$invalidate(25, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(23, instance2 = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(26, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(27, internalStyles = $$new_props.internalStyles);
    if ("selectAnchor" in $$props)
      $$invalidate(28, selectAnchor = $$new_props.selectAnchor);
    if ("selectAnchorAttrs" in $$props)
      $$invalidate(29, selectAnchorAttrs = $$new_props.selectAnchorAttrs);
    if ("selectedIndex" in $$props)
      $$invalidate(24, selectedIndex = $$new_props.selectedIndex);
    if ("menuId" in $$props)
      $$invalidate(45, menuId = $$new_props.menuId);
    if ("helperId" in $$props)
      $$invalidate(30, helperId = $$new_props.helperId);
    if ("addLayoutListener" in $$props)
      addLayoutListener = $$new_props.addLayoutListener;
    if ("removeLayoutListener" in $$props)
      removeLayoutListener = $$new_props.removeLayoutListener;
    if ("menuOpen" in $$props)
      $$invalidate(31, menuOpen = $$new_props.menuOpen);
    if ("menuClasses" in $$props)
      $$invalidate(32, menuClasses = $$new_props.menuClasses);
    if ("anchorElement" in $$props)
      $$invalidate(33, anchorElement = $$new_props.anchorElement);
    if ("anchorCorner" in $$props)
      $$invalidate(34, anchorCorner = $$new_props.anchorCorner);
    if ("wrapFocus" in $$props)
      $$invalidate(35, wrapFocus = $$new_props.wrapFocus);
    if ("list" in $$props)
      $$invalidate(36, list = $$new_props.list);
    if ("context" in $$props)
      $$invalidate(46, context = $$new_props.context);
    if ("leadingIcon" in $$props)
      $$invalidate(37, leadingIcon = $$new_props.leadingIcon);
    if ("helperText" in $$props)
      $$invalidate(38, helperText = $$new_props.helperText);
    if ("floatingLabel" in $$props)
      $$invalidate(39, floatingLabel = $$new_props.floatingLabel);
    if ("lineRipple" in $$props)
      $$invalidate(40, lineRipple = $$new_props.lineRipple);
    if ("notchedOutline" in $$props)
      $$invalidate(41, notchedOutline = $$new_props.notchedOutline);
    if ("previousSelectedIndex" in $$props)
      $$invalidate(63, previousSelectedIndex = $$new_props.previousSelectedIndex);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*selectedIndex, instance, value*/
    25165825 | $$self.$$.dirty[2] & /*previousSelectedIndex*/
    2) {
      $:
        if (previousSelectedIndex !== selectedIndex) {
          $$invalidate(63, previousSelectedIndex = selectedIndex);
          if (instance2) {
            instance2.setSelectedIndex(
              selectedIndex,
              /* closeMenu */
              false,
              /* skipNotify */
              true
            );
          } else {
            const values = getMenuItemValues();
            if (value !== values[selectedIndex]) {
              $$invalidate(0, value = values[selectedIndex]);
            }
          }
        }
    }
    if ($$self.$$.dirty[0] & /*value*/
    1) {
      $:
        set_store_value(valueStore, $valueStore = value, $valueStore);
    }
    if ($$self.$$.dirty[0] & /*instance, value*/
    8388609 | $$self.$$.dirty[1] & /*key*/
    33554432) {
      $:
        if (instance2 && instance2.getValue() !== key(value)) {
          instance2.setValue(key(value));
        }
    }
    if ($$self.$$.dirty[0] & /*instance, disabled*/
    8388672) {
      $:
        if (instance2 && instance2.getDisabled() !== disabled) {
          instance2.setDisabled(disabled);
        }
    }
    if ($$self.$$.dirty[0] & /*instance, invalid*/
    8388610 | $$self.$$.dirty[1] & /*dirty, updateInvalid*/
    83886080) {
      $:
        if (instance2 && dirty && instance2.isValid() !== !invalid) {
          if (updateInvalid) {
            $$invalidate(1, invalid = !instance2.isValid());
          } else {
            instance2.setValid(!invalid);
          }
        }
    }
    if ($$self.$$.dirty[0] & /*instance, required*/
    8389632) {
      $:
        if (instance2 && instance2.getRequired() !== required) {
          instance2.setRequired(required);
        }
    }
  };
  return [
    value,
    invalid,
    use,
    className,
    style,
    ripple,
    disabled,
    variant,
    noLabel,
    label,
    required,
    inputId,
    hiddenInput,
    withLeadingIcon,
    anchor$use,
    anchor$class,
    selectedTextContainer$use,
    selectedTextContainer$class,
    selectedText$use,
    selectedText$class,
    dropdownIcon$use,
    dropdownIcon$class,
    menu$class,
    instance2,
    selectedIndex,
    element2,
    internalClasses,
    internalStyles,
    selectAnchor,
    selectAnchorAttrs,
    helperId,
    menuOpen,
    menuClasses,
    anchorElement,
    anchorCorner,
    wrapFocus,
    list,
    leadingIcon,
    helperText,
    floatingLabel,
    lineRipple,
    notchedOutline,
    $selectedTextStore,
    forwardEvents,
    isUninitializedValue,
    menuId,
    context,
    selectedTextStore,
    valueStore,
    handleLeadingIconMount,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    $$slots,
    dirty,
    key,
    updateInvalid,
    getUseDefaultValidation,
    setUseDefaultValidation,
    focus,
    layout,
    getElement,
    previousSelectedIndex,
    slots,
    focus_handler,
    blur_handler,
    floatinglabel_binding,
    floatinglabel_binding_1,
    notchedoutline_binding,
    lineripple_binding,
    div0_binding,
    focus_handler_1,
    blur_handler_1,
    click_handler,
    list_1_selectedIndex_binding,
    SMUIList_mount_handler,
    menu_open_binding,
    SMUIMenu_selected_handler,
    SMUIMenuSurface_closing_handler,
    SMUIMenuSurface_closed_handler,
    SMUIMenuSurface_opened_handler,
    div1_binding,
    SMUISelectLeadingIcon_unmount_handler,
    SMUISelectHelperText_id_handler,
    SMUISelectHelperText_mount_handler,
    SMUISelectHelperText_unmount_handler,
    $$scope
  ];
}
var Select = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance_12,
      create_fragment2,
      safe_not_equal,
      {
        use: 2,
        class: 3,
        style: 4,
        ripple: 5,
        disabled: 6,
        variant: 7,
        noLabel: 8,
        label: 9,
        value: 0,
        key: 56,
        dirty: 55,
        invalid: 1,
        updateInvalid: 57,
        required: 10,
        inputId: 11,
        hiddenInput: 12,
        withLeadingIcon: 13,
        anchor$use: 14,
        anchor$class: 15,
        selectedTextContainer$use: 16,
        selectedTextContainer$class: 17,
        selectedText$use: 18,
        selectedText$class: 19,
        dropdownIcon$use: 20,
        dropdownIcon$class: 21,
        menu$class: 22,
        getUseDefaultValidation: 58,
        setUseDefaultValidation: 59,
        focus: 60,
        layout: 61,
        getElement: 62
      },
      null,
      [-1, -1, -1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Select",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ripple() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ripple(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get disabled() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set disabled(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get noLabel() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set noLabel(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get label() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set label(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get key() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set key(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dirty() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dirty(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get invalid() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set invalid(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get updateInvalid() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set updateInvalid(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get required() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set required(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inputId() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inputId(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get hiddenInput() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set hiddenInput(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get withLeadingIcon() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set withLeadingIcon(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchor$use() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchor$use(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get anchor$class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set anchor$class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selectedTextContainer$use() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selectedTextContainer$use(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selectedTextContainer$class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selectedTextContainer$class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selectedText$use() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selectedText$use(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selectedText$class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selectedText$class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dropdownIcon$use() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dropdownIcon$use(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get dropdownIcon$class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dropdownIcon$class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get menu$class() {
    throw new Error("<Select>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set menu$class(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getUseDefaultValidation() {
    return this.$$.ctx[58];
  }
  set getUseDefaultValidation(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setUseDefaultValidation() {
    return this.$$.ctx[59];
  }
  set setUseDefaultValidation(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get focus() {
    return this.$$.ctx[60];
  }
  set focus(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get layout() {
    return this.$$.ctx[61];
  }
  set layout(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[62];
  }
  set getElement(value) {
    throw new Error("<Select>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Select_default = Select;

// node_modules/@smui/select/dist/Option.svelte
function create_default_slot2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[11].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[13],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8192)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[13],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[13]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[13],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot2.name,
    type: "slot",
    source: "(1:0) <Item   bind:this={element}   use={usePass}   data-value={value}   {value}   {selected}   {...$$restProps}>",
    ctx
  });
  return block;
}
function create_fragment3(ctx) {
  let item;
  let current;
  const item_spread_levels = [
    { use: (
      /*usePass*/
      ctx[3]
    ) },
    { "data-value": (
      /*value*/
      ctx[0]
    ) },
    { value: (
      /*value*/
      ctx[0]
    ) },
    { selected: (
      /*selected*/
      ctx[2]
    ) },
    /*$$restProps*/
    ctx[6]
  ];
  let item_props = {
    $$slots: { default: [create_default_slot2] },
    $$scope: { ctx }
  };
  for (let i = 0; i < item_spread_levels.length; i += 1) {
    item_props = assign(item_props, item_spread_levels[i]);
  }
  item = new Item_default({ props: item_props, $$inline: true });
  ctx[12](item);
  const block = {
    c: function create() {
      create_component(item.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(item.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(item, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const item_changes = dirty & /*usePass, value, selected, $$restProps*/
      77 ? get_spread_update(item_spread_levels, [
        dirty & /*usePass*/
        8 && { use: (
          /*usePass*/
          ctx2[3]
        ) },
        dirty & /*value*/
        1 && { "data-value": (
          /*value*/
          ctx2[0]
        ) },
        dirty & /*value*/
        1 && { value: (
          /*value*/
          ctx2[0]
        ) },
        dirty & /*selected*/
        4 && { selected: (
          /*selected*/
          ctx2[2]
        ) },
        dirty & /*$$restProps*/
        64 && get_spread_object(
          /*$$restProps*/
          ctx2[6]
        )
      ]) : {};
      if (dirty & /*$$scope*/
      8192) {
        item_changes.$$scope = { dirty, ctx: ctx2 };
      }
      item.$set(item_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(item.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(item.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      ctx[12](null);
      destroy_component(item, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let usePass;
  let selected;
  const omit_props_names = ["use", "class", "value", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $selectedText;
  let $selectedValue;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Option", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  const className = "";
  let { value = "" } = $$props;
  let element2;
  const selectedText = getContext("SMUI:select:selectedText");
  validate_store(selectedText, "selectedText");
  component_subscribe($$self, selectedText, (value2) => $$invalidate(14, $selectedText = value2));
  const selectedValue = getContext("SMUI:select:value");
  validate_store(selectedValue, "selectedValue");
  component_subscribe($$self, selectedValue, (value2) => $$invalidate(10, $selectedValue = value2));
  setContext("SMUI:list:item:role", "option");
  onMount(setSelectedText);
  onDestroy(setSelectedText);
  function setSelectedText() {
    if (selected && element2) {
      set_store_value(selectedText, $selectedText = element2.getPrimaryText(), $selectedText);
    }
  }
  function getElement() {
    return element2.getElement();
  }
  function item_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(1, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(7, use = $$new_props.use);
    if ("value" in $$new_props)
      $$invalidate(0, value = $$new_props.value);
    if ("$$scope" in $$new_props)
      $$invalidate(13, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    onDestroy,
    getContext,
    setContext,
    get_current_component,
    forwardEventsBuilder,
    Item: Item_default,
    forwardEvents,
    use,
    className,
    value,
    element: element2,
    selectedText,
    selectedValue,
    setSelectedText,
    getElement,
    selected,
    usePass,
    $selectedText,
    $selectedValue
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(7, use = $$new_props.use);
    if ("value" in $$props)
      $$invalidate(0, value = $$new_props.value);
    if ("element" in $$props)
      $$invalidate(1, element2 = $$new_props.element);
    if ("selected" in $$props)
      $$invalidate(2, selected = $$new_props.selected);
    if ("usePass" in $$props)
      $$invalidate(3, usePass = $$new_props.usePass);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*use*/
    128) {
      $:
        $$invalidate(3, usePass = [forwardEvents, ...use]);
    }
    if ($$self.$$.dirty & /*value, $selectedValue*/
    1025) {
      $:
        $$invalidate(2, selected = value != null && value !== "" && $selectedValue === value);
    }
  };
  return [
    value,
    element2,
    selected,
    usePass,
    selectedText,
    selectedValue,
    $$restProps,
    use,
    className,
    getElement,
    $selectedValue,
    slots,
    item_binding,
    $$scope
  ];
}
var Option = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment3, safe_not_equal, {
      use: 7,
      class: 8,
      value: 0,
      getElement: 9
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Option",
      options,
      id: create_fragment3.name
    });
  }
  get use() {
    throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    return this.$$.ctx[8];
  }
  set class(value) {
    throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get value() {
    throw new Error("<Option>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set value(value) {
    throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[9];
  }
  set getElement(value) {
    throw new Error("<Option>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Option_default = Option;

// node_modules/@smui/select/dist/index.js
var dist_default7 = Select_default;
export {
  DefaultFocusState,
  Option_default as Option,
  dist_default7 as default
};
//# sourceMappingURL=@smui_select.js.map
